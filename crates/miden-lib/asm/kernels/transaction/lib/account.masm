use.std::collections::mmr
use.std::collections::smt
use.std::crypto::hashes::rpo
use.std::mem

use.kernel::util::account_id
use.kernel::constants
use.kernel::memory

#Â ERRORS
# =================================================================================================

const.ERR_ACCOUNT_NONCE_INCREASE_MUST_BE_U32="account nonce cannot be increased by a greater than u32 value"

const.ERR_ACCOUNT_CODE_IS_NOT_UPDATABLE="account code must be updatable for it to be possible to set new code"

const.ERR_ACCOUNT_ANCHOR_BLOCK_COMMITMENT_MUST_NOT_BE_EMPTY="anchor block commitment must not be empty"

const.ERR_ACCOUNT_SEED_ANCHOR_BLOCK_COMMITMENT_DIGEST_MISMATCH="ID of the new account does not match the ID computed from the seed and anchor block commitment"

const.ERR_ACCOUNT_SETTING_VALUE_ITEM_ON_NON_VALUE_SLOT="failed to write an account value item to a non-value storage slot"

const.ERR_ACCOUNT_SETTING_MAP_ITEM_ON_NON_MAP_SLOT="failed to write an account map item to a non-map storage slot"

const.ERR_ACCOUNT_PROC_NOT_PART_OF_ACCOUNT_CODE="account procedure is not part of the account code"

const.ERR_ACCOUNT_PROC_INDEX_OUT_OF_BOUNDS="provided procedure index is out of bounds"

const.ERR_ACCOUNT_STORAGE_SLOT_INDEX_OUT_OF_BOUNDS="provided storage slot index is out of bounds"

const.ERR_FAUCET_INVALID_STORAGE_OFFSET="storage offset is invalid for a faucet account (0 is prohibited as it is the reserved data slot for faucets)"

const.ERR_ACCOUNT_CODE_COMMITMENT_MISMATCH="computed account code commitment does not match recorded account code commitment"

const.ERR_ACCOUNT_TOO_MANY_PROCEDURES="number of account procedures exceeds the maximum limit of 256"

const.ERR_ACCOUNT_TOO_MANY_STORAGE_SLOTS="number of account storage slots exceeds the maximum limit of 255"

const.ERR_ACCOUNT_STORAGE_COMMITMENT_MISMATCH="computed account storage commitment does not match recorded account storage commitment"

const.ERR_ACCOUNT_INVALID_STORAGE_OFFSET_FOR_SIZE="storage size can only be zero if storage offset is also zero"

const.ERR_FOREIGN_ACCOUNT_ID_IS_ZERO="ID of the provided foreign account equals zero"

const.ERR_FOREIGN_ACCOUNT_MAX_NUMBER_EXCEEDED="maximum allowed number of foreign account to be loaded (64) was exceeded"

const.ERR_FOREIGN_ACCOUNT_INVALID_COMMITMENT="commitment of the foreign account in the advice provider does not match the commitment in the account tree"

const.ERR_ACCOUNT_ID_UNKNOWN_VERSION="unknown version in account ID"

const.ERR_ACCOUNT_ID_EPOCH_MUST_BE_LESS_THAN_U16_MAX="epoch must be less than u16::MAX (0xffff)"

const.ERR_ACCOUNT_ID_UNKNOWN_STORAGE_MODE="unknown account storage mode in account ID"

const.ERR_ACCOUNT_READING_MAP_VALUE_FROM_NON_MAP_SLOT="failed to read an account map item from a non-map storage slot"

# CONSTANTS
# =================================================================================================

# The account storage slot at which faucet data is stored.
# Fungible faucet: The faucet data consists of [0, 0, 0, total_issuance]
# Non-fungible faucet: The faucet data consists of SMT root containing minted non-fungible assets.
const.FAUCET_STORAGE_DATA_SLOT=0

# The maximum storage slot index
const.MAX_STORAGE_SLOT_INDEX=254

# The maximum number of account storage slots.
const.MAX_NUM_STORAGE_SLOTS=MAX_STORAGE_SLOT_INDEX+1

# The maximum number of account interface procedures.
const.MAX_NUM_PROCEDURES=256

# Given the least significant 32 bits of an account ID's prefix, this mask defines the bits used
# to determine the account version.
const.ACCOUNT_VERSION_MASK_U32=0x0f # 0b1111

# Given the least significant 32 bits of an account ID's prefix, this mask defines the bits used
# to determine the account type.
const.ACCOUNT_ID_TYPE_MASK_U32=0x30 # 0b11_0000

# Given the least significant 32 bits of an account ID's first felt, this mask defines the bits used
# to determine the account storage mode.
const.ACCOUNT_ID_STORAGE_MODE_MASK_U32=0xC0 # 0b1100_0000

# Given the least significant 32 bits of an account ID's first felt with the storage mode mask
# applied, this value defines the public storage mode.
const.ACCOUNT_ID_STORAGE_MODE_PUBLIC_U32=0 # 0b0000_0000

# Given the least significant 32 bits of an account ID's first felt with the storage mode mask
# applied, this value defines the private storage mode.
const.ACCOUNT_ID_STORAGE_MODE_PRIVATE_U32=0x80 # 0b1000_0000

# Bit pattern for an account w/ immutable code, after the account type mask has been applied.
const.REGULAR_ACCOUNT_IMMUTABLE_CODE=0 # 0b00_0000

# Bit pattern for an account w/ updatable code, after the account type mask has been applied.
const.REGULAR_ACCOUNT_UPDATABLE_CODE=0x10 # 0b01_0000

# Bit pattern for a fungible faucet w/ immutable code, after the account type mask has been applied.
const.FUNGIBLE_FAUCET_ACCOUNT=0x20 # 0b10_0000

# Bit pattern for a non-fungible faucet w/ immutable code, after the account type mask has been
# applied.
const.NON_FUNGIBLE_FAUCET_ACCOUNT=0x30 # 0b11_0000

# Bit pattern for a faucet account, after the account type mask has been applied.
const.FAUCET_ACCOUNT=0x20 # 0b10_0000

# Depth of the account database tree.
const.ACCOUNT_TREE_DEPTH=64

# The number of field elements it takes to store one account storage slot.
const.ACCOUNT_STORAGE_SLOT_DATA_LENGTH=8

# The number of field elements it takes to store one account procedure.
const.ACCOUNT_PROCEDURE_DATA_LENGTH=8

# EVENTS
# =================================================================================================

# Event emitted before an account storage item is updated.
const.ACCOUNT_STORAGE_BEFORE_SET_ITEM_EVENT=131076
# Event emitted after an account storage item is updated.
const.ACCOUNT_STORAGE_AFTER_SET_ITEM_EVENT=131077

# Event emitted before an account storage map item is updated.
const.ACCOUNT_STORAGE_BEFORE_SET_MAP_ITEM_EVENT=131078
# Event emitted after an account storage map item is updated.
const.ACCOUNT_STORAGE_AFTER_SET_MAP_ITEM_EVENT=131079

# Event emitted before an account nonce is incremented.
const.ACCOUNT_BEFORE_INCREMENT_NONCE_EVENT=131080
# Event emitted after an account nonce is incremented.
const.ACCOUNT_AFTER_INCREMENT_NONCE_EVENT=131081

# Event emitted to push the index of the account procedure at the top of the operand stack onto
# the advice stack.
const.ACCOUNT_PUSH_PROCEDURE_INDEX_EVENT=131082

# CONSTANT ACCESSORS
# =================================================================================================

#! Returns the account storage slot at which faucet data is stored.
#! Fungible faucet: The faucet data consists of [0, 0, 0, total_issuance]
#! Non-fungible faucet: The faucet data consists of SMT root containing minted non-fungible assets.
#!
#! Inputs:  []
#! Outputs: [faucet_storage_data_slot]
#!
#! Where:
#! - faucet_storage_data_slot is the account storage slot at which faucet data is stored.
export.get_faucet_storage_data_slot
    push.FAUCET_STORAGE_DATA_SLOT
end

#! Returns the maximum number of account storage slots.
#!
#! Inputs:  []
#! Outputs: [max_num_storage_slots]
#!
#! Where:
#! - max_num_storage_slots is the maximum number of account storage slots.
export.get_max_num_storage_slots
    push.MAX_NUM_STORAGE_SLOTS
end

#! Returns the maximum number of account interface procedures.
#!
#! Inputs:  []
#! Outputs: [max_num_procedures]
#!
#! Where:
#! - max_num_procedures is the maximum number of account interface procedures.
export.get_max_num_procedures
    push.MAX_NUM_PROCEDURES
end

# PROCEDURES
# =================================================================================================

#! Computes and returns the account commitment from account data stored in memory.
#!
#! Inputs:  []
#! Outputs: [ACCOUNT_COMMITMENT]
#!
#! Where:
#! - ACCOUNT_COMMITMENT is the commitment of the account data.
export.get_current_commitment
    # prepare the stack for computing the account commitment
    exec.memory::get_current_account_data_ptr padw padw padw

    # stream account data and compute sequential hash. We perform two `mem_stream` operations
    # because account data consists of exactly 4 words.
    mem_stream hperm mem_stream hperm

    # extract account commitment
    exec.rpo::squeeze_digest

    # drop memory pointer
    movup.4 drop
end

#! Increments the account nonce by the provided value.
#!
#! Inputs:  [value]
#! Outputs: []
#!
#! Where:
#! - value is the value to increment the nonce by. value can be at most 2^32 - 1 otherwise this
#!   procedure panics.
export.incr_nonce
    u32assert.err=ERR_ACCOUNT_NONCE_INCREASE_MUST_BE_U32

    # emit event to signal that account nonce is being incremented
    emit.ACCOUNT_BEFORE_INCREMENT_NONCE_EVENT

    exec.memory::get_acct_nonce add
    exec.memory::set_acct_nonce

    emit.ACCOUNT_AFTER_INCREMENT_NONCE_EVENT
end

#! Returns the id of the current account.
#!
#! Inputs:  []
#! Outputs: [curr_acct_id_prefix, curr_acct_id_suffix]
#!
#! Where:
#! - curr_acct_id_{prefix,suffix} are the prefix and suffix felts of the account ID of the currently
#!   accessing account.
export.memory::get_account_id->get_id

#! Returns the account nonce.
#!
#! Inputs:  []
#! Outputs: [nonce]
#!
#! Where:
#! - nonce is the account nonce.
export.memory::get_acct_nonce->get_nonce

#! Returns the initial account commitment.
#!
#! Inputs:  []
#! Outputs: [INIT_COMMITMENT]
#!
#! Where:
#! - INIT_COMMITMENT is the initial account commitment.
export.memory::get_init_account_commitment->get_initial_commitment

#! Returns a boolean indicating whether the account is a fungible faucet.
#!
#! Inputs:  [acct_id_prefix]
#! Outputs: [is_fungible_faucet]
#!
#! Where:
#! - acct_id_prefix is the prefix of the account ID.
#! - is_fungible_faucet is a boolean indicating whether the account is a fungible faucet.
export.::kernel::util::account_id::is_fungible_faucet

#! Returns a boolean indicating whether the account is a non-fungible faucet.
#!
#! Inputs:  [acct_id_prefix]
#! Outputs: [is_non_fungible_faucet]
#!
#! Where:
#! - acct_id_prefix is the prefix of the account ID.
#! - is_non_fungible_faucet is a boolean indicating whether the account is a non-fungible faucet.
export.::kernel::util::account_id::is_non_fungible_faucet

#! Returns a boolean indicating whether the account is a faucet.
#!
#! Inputs:  [acct_id_prefix]
#! Outputs: [is_faucet]
#!
#! Where:
#! - acct_id_prefix is the prefix of the account ID.
#! - is_faucet is a boolean indicating whether the account is a faucet.
export.::kernel::util::account_id::is_faucet

#! Returns a boolean indicating whether the account is a regular updatable account.
#!
#! Inputs:  [acct_id_prefix]
#! Outputs: [is_updatable_account]
#!
#! Where:
#! - acct_id_prefix is the prefix of the account ID.
#! - is_updatable_account is a boolean indicating whether the account is a regular updatable
#!   account.
export.::kernel::util::account_id::is_updatable_account

#! Returns a boolean indicating whether the account is a regular immutable account.
#!
#! Inputs:  [acct_id_prefix]
#! Outputs: [is_immutable_account]
#!
#! Where:
#! - acct_id_prefix is the prefix of the account ID.
#! - is_immutable_account is a boolean indicating whether the account is a regular immutable
#!   account.
export.::kernel::util::account_id::is_immutable_account

#! Returns a boolean indicating whether the given account_ids are equal.
#!
#! Inputs:  [acct_id_prefix, acct_id_suffix, other_acct_id_prefix, other_acct_id_suffix]
#! Outputs: [is_id_equal]
#!
#! Where:
#! - acct_id_{prefix,suffix} are the prefix and suffix felts of an account ID.
#! - other_acct_id_{prefix,suffix} are the prefix and suffix felts of the other account ID to
#!   compare against.
#! - is_id_equal is a boolean indicating whether the account IDs are equal.
export.::kernel::util::account_id::is_equal->is_id_equal

#! Validates an account ID. Note that this does not validate anything about the account type,
#! since any bit pattern is a valid account type.
#!
#! Inputs:  [account_id_prefix, account_id_suffix]
#! Outputs: []
#!
#! Where:
#! - account_id_{prefix,suffix} are the prefix and suffix felts of the account ID.
#!
#! Panics if:
#! - account_id_prefix does not contain version zero.
#! - account_id_prefix does not contain either the public or private storage mode.
#! - account_id_suffix contains an anchor epoch that is greater or equal to 2^16.
#! - account_id_suffix does not have its lower 8 bits set to zero.
export.::kernel::util::account_id::validate->validate_id

#! Gets the code commitment of the account the transaction is being executed against.
#!
#! Inputs:  []
#! Outputs: [CODE_COMMITMENT]
#!
#! Where:
#! - CODE_COMMITMENT is the commitment of the account code.
export.get_code_commitment
    # get the code commitment
    exec.memory::get_acct_code_commitment
    # => [CODE_COMMITMENT]
end

#! Gets the storage commitment of the account the transaction is being executed against.
#!
#! Inputs:  []
#! Outputs: [STORAGE_COMMITMENT]
#!
#! Where:
#! - STORAGE_COMMITMENT is the commitment of the account code.
export.get_storage_commitment
    # get the storage commitment
    exec.memory::get_acct_storage_commitment
    # => [STORAGE_COMMITMENT]
end

#! Applies storage offset to provided storage slot index for storage access.
#!
#! Inputs:  [storage_offset, storage_size, slot_index]
#! Outputs: [offset_slot_index]
#!
#! Where:
#! - storage_offset is the offset of the storage for this account component.
#! - storage_size is the number of storage slots accessible from this account component.
#! - slot_index is the index of the storage slot to be accessed.
#! - offset_slot_index is the final index of the storage slot with the storage offset applied to it.
#!
#! Panics if:
#! - the computed index is out of bounds
export.apply_storage_offset
    # offset index
    dup movup.3 add
    # => [offset_slot_index, storage_offset, storage_size]

    # verify that slot_index is in bounds
    movdn.2 add dup.1 gt assert.err=ERR_ACCOUNT_STORAGE_SLOT_INDEX_OUT_OF_BOUNDS
    # => [offset_slot_index]
end

#! Validates all account procedure's storage metadata.
#!
#! Inputs:  []
#! Outputs: []
#!
#! Panics if:
#! - Storage offset + storage size > number of storage slots.
#! - Storage size is zero and storage offset is non-zero.
#!   - This is validated to ensure users do not accidentally set a non-zero offset with a
#!     zero size which would prevent any access to storage.
#! - The storage offset of a faucet account's procedure is 0 with a size != 0.
#!   - This prevents access to the reserved storage slot.
export.validate_procedure_metadata
    # get number of account procedures and number of storage slots
    exec.memory::get_num_account_procedures exec.memory::get_num_storage_slots
    # => [num_storage_slots, num_account_procedures]

    # prepare stack for looping
    push.0.1
    # => [start_loop, index, num_storage_slots, num_account_procedures]

    # check if the account is a faucet
    exec.get_id swap drop exec.is_faucet
    # => [is_faucet, start_loop, index, num_storage_slots, num_account_procedures]

    # we do not check if num_account_procedures == 0 here because a valid
    # account has between 1 and 256 procedures with associated offsets
    if.true
        # This branch handles procedures from faucet accounts.
        while.true
            # get storage offset and size from memory
            dup exec.get_procedure_metadata
            # => [storage_offset, storage_size, index, num_storage_slots, num_account_procedures]

            # Procedures that do not access storage are defined with (offset, size) = (0, 0).
            # But we want to fail on tuples defined with a zero size but non-zero offset, since that
            # is a logic error.
            # We assert this with: (size == 0 && offset != 0) == 0.
            dup.1 eq.0 dup.1 eq.0 not and assertz.err=ERR_ACCOUNT_INVALID_STORAGE_OFFSET_FOR_SIZE
            # => [storage_offset, storage_size, index, num_storage_slots, num_account_procedures]

            # No procedure should access the reserved faucet slot (slot 0). However (0, 0) should
            # still be allowed per the above.
            # We assert this with: (offset == 0 && size != 0) == 0.
            dup.1 eq.0 not dup.1 eq.0 and assertz.err=ERR_FAUCET_INVALID_STORAGE_OFFSET
            # => [storage_offset, storage_size, index, num_storage_slots, num_account_procedures]

            # assert that storage limit is in bounds
            add dup.2 lte assert.err=ERR_ACCOUNT_STORAGE_SLOT_INDEX_OUT_OF_BOUNDS
            # => [index, num_storage_slots, num_account_procedures]

            # check if we should continue looping
            add.1 dup dup.3 lt
            # => [should_loop, index, num_storage_slots, num_account_procedures]
        end
    else
        # This branch handles procedures from regular accounts.
        while.true
            # get storage offset and size from memory
            dup exec.get_procedure_metadata
            # => [storage_offset, storage_size, index, num_storage_slots, num_account_procedures]

            # Procedures that do not access storage are defined with (offset, size) = (0, 0).
            # But we want to fail on tuples defined with a zero size but non-zero offset, since that
            # is a logic error.
            # We assert this with: (size == 0 && offset != 0) == 0.
            dup.1 eq.0 dup.1 eq.0 not and assertz.err=ERR_ACCOUNT_INVALID_STORAGE_OFFSET_FOR_SIZE
            # => [storage_offset, storage_size, index, num_storage_slots, num_account_procedures]

            # assert that storage limit is in bounds
            add dup.2 lte assert.err=ERR_ACCOUNT_STORAGE_SLOT_INDEX_OUT_OF_BOUNDS
            # => [index, num_storage_slots, num_account_procedures]

            # check if we should continue looping
            add.1 dup dup.3 lt
            # => [should_loop, index, num_storage_slots, num_account_procedures]
        end
    end

    # clean stack
    drop drop drop
    # => []
end

#! Gets an item from the account storage.
#!
#! Note:
#! - We assume that index has been validated and is within bounds.
#!
#! Inputs:  [index]
#! Outputs: [VALUE]
#!
#! Where:
#! - index is the index of the item to get.
#! - VALUE is the value of the item.
export.get_item
    # get account storage slots section offset
    exec.memory::get_acct_storage_slots_section_ptr
    # => [acct_storage_slots_section_offset, index]

    # get the item from storage
    swap mul.8 add padw movup.4 mem_loadw
    # => [VALUE]
end

#! Sets an item in the account storage.
#!
#! Note:
#! - We assume that index has been validated and is within bounds.
#!
#! Inputs:  [index, V']
#! Outputs: [V]
#!
#! Where:
#! - index is the index of the item to set.
#! - V' is the value to set.
#! - V is the previous value of the item.
#!
#! Panics if:
#! - the storage slot type is not value.
export.set_item
    emit.ACCOUNT_STORAGE_BEFORE_SET_ITEM_EVENT
    # => [index, V']

    # get storage slot type
    dup exec.get_storage_slot_type
    # => [storage_slot_type, index, V']

    # check if type == slot
    exec.constants::get_storage_slot_type_value eq
    assert.err=ERR_ACCOUNT_SETTING_VALUE_ITEM_ON_NON_VALUE_SLOT
    # => [index, V']

    # duplicate the index and the V' enabling emission of an
    # event after an account storage item is being updated
    movdn.4 dupw dup.8
    # => [index, V', V', index]

    # set V' in the storage slot
    exec.set_item_raw
    # => [V, V', index]

    # emit event to signal that an account storage item is being updated
    swapw movup.8
    emit.ACCOUNT_STORAGE_AFTER_SET_ITEM_EVENT drop dropw
    # => [V]
end

#! Returns the VALUE located under the specified KEY within the map contained in the given
#! account storage slot.
#!
#! Inputs:  [index, KEY]
#! Outputs: [VALUE]
#!
#! Note:
#! - We assume that index has been validated and is within bounds.
#!
#! Where:
#! - index is the index of the storage slot that contains the map root.
#! - VALUE is the value of the map item at KEY.
#!
#! Panics if:
#! - the requested storage slot type is not map.
export.get_map_item
    # get the storage slot type
    dup exec.get_storage_slot_type
    # => [slot_type, index, KEY]

    # check if storage slot type is map
    exec.constants::get_storage_slot_type_map eq
    assert.err=ERR_ACCOUNT_READING_MAP_VALUE_FROM_NON_MAP_SLOT
    # => [index, KEY]

    # fetch the account storage item, which is ROOT of the map
    exec.get_item swapw
    # => [KEY, ROOT]

    # see hash_map_key's docs for why this is done
    exec.hash_map_key
    # => [HASHED_KEY, ROOT]

    # fetch the VALUE located under HASHED_KEY in the tree
    exec.smt::get
    # => [VALUE, ROOT]

    # remove the ROOT from the stack
    swapw dropw
    # => [VALUE]
end

#! Stores NEW_VALUE under the specified KEY within the map contained in the given account storage slot.
#!
#! Note:
#! - We assume that index has been validated and is within bounds.
#!
#! Inputs:  [index, KEY, NEW_VALUE]
#! Outputs: [OLD_MAP_ROOT, OLD_MAP_VALUE]
#!
#! Where:
#! - index is the index of the storage slot which contains the map root.
#! - NEW_VALUE is the value to set under KEY.
#! - KEY is the key to set.
#! - OLD_MAP_VALUE is the previous value of the item.
#! - OLD_MAP_ROOT is the root of the old map before insertion
#!
#! Panics if:
#! - the storage slot type is not map.
#! - no map is found for ROOT.
export.set_map_item.12
    # store index for later
    dup loc_store.0 exec.get_item
    # => [OLD_ROOT, KEY, NEW_VALUE, ...]

    movdnw.2 loc_load.0
    # => [index, KEY, NEW_VALUE, OLD_ROOT, ...]

    # check if storage type is map
    dup exec.get_storage_slot_type
    # => [slot_type, index, KEY, NEW_VALUE, OLD_ROOT]

    # check if slot_type == map
    exec.constants::get_storage_slot_type_map eq
    assert.err=ERR_ACCOUNT_SETTING_MAP_ITEM_ON_NON_MAP_SLOT
    # => [index, KEY, NEW_VALUE, OLD_ROOT]

    emit.ACCOUNT_STORAGE_BEFORE_SET_MAP_ITEM_EVENT
    # => [index, KEY, NEW_VALUE, OLD_ROOT]

    # duplicate the original KEY and the NEW_VALUE to be able to emit an event after the
    # account storage item was updated
    movdn.12 movupw.2 dupw.2 dupw.2
    # => [KEY, NEW_VALUE, OLD_ROOT, KEY, NEW_VALUE, index, ...]

    # see hash_map_key's docs for why this is done
    exec.hash_map_key
    # => [HASHED_KEY, NEW_VALUE, OLD_ROOT, KEY, NEW_VALUE, index, ...]

    # set the NEW_VALUE under HASHED_KEY in the tree
    # note smt::set expects the stack to be [NEW_VALUE, HASHED_KEY, OLD_ROOT, ...]
    swapw exec.smt::set
    # => [OLD_MAP_VALUE, NEW_ROOT, KEY, NEW_VALUE, index, ...]

    # store OLD_MAP_VALUE and NEW_ROOT until the end of the procedure
    loc_storew.4 dropw loc_storew.8 dropw
    # => [KEY, NEW_VALUE, index, ...]

    # emit event to signal that an account storage item is being updated
    movup.8
    emit.ACCOUNT_STORAGE_AFTER_SET_MAP_ITEM_EVENT drop
    # => [KEY, NEW_VALUE, ...]

    # load OLD_MAP_VALUE and NEW_ROOT on the top of the stack
    loc_loadw.8 swapw loc_loadw.4 swapw
    # => [NEW_ROOT, OLD_MAP_VALUE, ...]

    # set the root of the map in the respective account storage slot
    loc_load.0 exec.set_item_raw
    # => [OLD_MAP_ROOT, OLD_MAP_VALUE, ...]
end

#! Returns the type of the requested storage slot.
#!
#! Inputs:  [index]
#! Outputs: [slot_type]
#!
#! Where:
#! - index is the location in memory of the storage slot.
#! - slot_type is the type of the storage slot.
#!
#! Panics if:
#! - the slot index is out of bounds.
export.get_storage_slot_type
    # check that index is in bounds
    dup exec.memory::get_num_storage_slots lt assert.err=ERR_ACCOUNT_STORAGE_SLOT_INDEX_OUT_OF_BOUNDS
    # => [index]

    # get account storage slots section offset
    exec.memory::get_acct_storage_slots_section_ptr
    # => [acct_storage_slots_section_offset, index]

    # get storage slot type
    swap mul.8 add add.4 mem_load
    # => [slot_type]
end

#! Returns the procedure information.
#!
#! Inputs:  [index]
#! Outputs: [PROC_ROOT, storage_offset, storage_size]
#!
#! Where:
#! - PROC_ROOT is the hash of the procedure.
#! - storage_offset is the procedure storage offset.
#! - storage_size is the number of storage slots the procedure is allowed to access.
#!
#! Panics if:
#! - the procedure index is out of bounds.
export.get_procedure_info
    # check that index < number of procedures contained in the account code
    dup exec.memory::get_num_account_procedures lt assert.err=ERR_ACCOUNT_PROC_INDEX_OUT_OF_BOUNDS
    # => [index]

    # get procedure pointer
    mul.8 exec.memory::get_acct_procedures_section_ptr add dup add.4 swap
    # => [metadata_ptr, proc_ptr]

    # load procedure information from memory
    padw movup.4 mem_loadw padw movup.8 mem_loadw
    # => [METADATA, PROC_ROOT]

    # keep relevant data
    drop drop swap movdn.5 movdn.5
    # => [PROC_ROOT, storage_offset, storage_size]
end

#! Verifies that the procedure root is part of the account code.
#!
#! Inputs:  [PROC_ROOT]
#! Outputs: [storage_offset, storage_size]
#!
#! Where:
#! - PROC_ROOT is the hash of the procedure to authenticate.
#! - storage_offset is the procedure storage offset.
#! - storage_size is the number of storage slots the procedure is allowed to access.
#!
#! Panics if:
#! - the procedure root is not part of the account code.
export.authenticate_procedure
    # load procedure index
    emit.ACCOUNT_PUSH_PROCEDURE_INDEX_EVENT adv_push.1
    # => [index, PROC_ROOT]

    # get procedure info (PROC_ROOT, storage_offset, storage_size) from memory stored at index
    exec.get_procedure_info
    # => [MEM_PROC_ROOT, storage_offset, storage_size, PROC_ROOT]

    # verify that PROC_ROOT exists in memory at index
    movup.4 movdn.9 movup.4 movdn.9 assert_eqw.err=ERR_ACCOUNT_PROC_NOT_PART_OF_ACCOUNT_CODE
    # => [storage_offset, storage_size]
end

#! Validates that the account seed, provided via the advice map, satisfies the seed requirements.
#!
#! Validation is performed via the following steps:
#! 1. Retrieve the anchor block commitment by computing the block number of the anchor block and
#!    retrieving it from the partial blockchain.
#! 2. Compute the hash of (SEED, CODE_COMMITMENT, STORAGE_COMMITMENT, ANCHOR_BLOCK_COMMITMENT).
#! 3. Assert the two least significant elements of the digest are equal to the account ID of the
#!    account the transaction is being executed against.
#!
#! Inputs:  []
#! Outputs: []
export.validate_seed
    # Load the block commitment of the anchor block from the partial blockchain.
    # This is the block commitment to which the account ID is anchored and is derived from.
    # ---------------------------------------------------------------------------------------------

    # prepare the advice map key for the seed for later
    exec.memory::get_account_id push.0.0
    # => [0, 0, account_id_prefix, account_id_suffix]

    # get the anchor block's number
    dup.3 exec.account_id::id_anchor_block_num
    # => [anchor_block_num, 0, 0, account_id_prefix, account_id_suffix]

    exec.memory::get_partial_blockchain_ptr swap
    # => [anchor_block_num, partial_blockchain_ptr, 0, 0, account_id_prefix, account_id_suffix]

    exec.mmr::get
    # => [ANCHOR_BLOCK_COMMITMENT, 0, 0, account_id_prefix, account_id_suffix]

    # assert that the anchor block commitment is not the empty word
    padw eqw not assert.err=ERR_ACCOUNT_ANCHOR_BLOCK_COMMITMENT_MUST_NOT_BE_EMPTY dropw
    # => [ANCHOR_BLOCK_COMMITMENT, 0, 0, account_id_prefix, account_id_suffix]

    # Compute the hash of (SEED, CODE_COMMITMENT, STORAGE_COMMITMENT, ANCHOR_BLOCK_COMMITMENT).
    # ---------------------------------------------------------------------------------------------

    # prepare advice push_mapval
    swapw
    # => [0, 0, account_id_prefix, account_id_suffix, ANCHOR_BLOCK_COMMITMENT]

    # populate first four elements of the rate with the account ID seed
    adv.push_mapval adv_loadw
    # => [SEED, ANCHOR_BLOCK_COMMITMENT]

    # pad capacity element of hasher
    padw swapw
    # => [SEED, 0, 0, 0, 0, ANCHOR_BLOCK_COMMITMENT]

    # populate last four elements of the hasher rate with the code commitment
    exec.memory::get_acct_code_commitment
    # => [CODE_COMMITMENT, SEED, 0, 0, 0, 0, ANCHOR_BLOCK_COMMITMENT]

    # perform first permutation of seed and code_commitment (from advice stack)
    # perm(seed, code_commitment)
    hperm
    # => [RATE, RATE, PERM, ANCHOR_BLOCK_COMMITMENT]

    # clear rate elements
    dropw dropw
    # => [PERM, ANCHOR_BLOCK_COMMITMENT]

    # perform second permutation perm(storage_commitment, 0, 0, 0, 0)
    swapw exec.memory::get_acct_storage_commitment swapw
    # => [ANCHOR_BLOCK_COMMITMENT, STORAGE_COMMITMENT, PERM]

    hperm
    # => [RATE, RATE, CAP]

    # extract digest
    exec.rpo::squeeze_digest
    # => [DIGEST]

    # Shape suffix to add the anchor epoch and compare computed and provided ID.
    # ---------------------------------------------------------------------------------------------

    # extract account ID from digest
    drop drop swap
    # => [hashed_account_id_prefix, hashed_account_id_suffix]

    exec.memory::get_account_id movdn.3
    # => [account_id_suffix, hashed_account_id_prefix, hashed_account_id_suffix, account_id_prefix]

    # extract anchor epoch from ID of the new account
    dup movdn.4 exec.account_id::id_anchor_epoch
    # => [anchor_epoch, hashed_account_id_prefix, hashed_account_id_suffix, account_id_prefix, account_id_suffix]

    # shape suffix of hashed id, adding the anchor epoch and setting the lower 8 bits to zero
    movup.2 exec.account_id::shape_suffix swap
    # => [hashed_account_id_prefix, hashed_account_id_suffix, account_id_prefix, account_id_suffix]

    # assert the account ID matches the account ID of the new account
    exec.is_id_equal assert.err=ERR_ACCOUNT_SEED_ANCHOR_BLOCK_COMMITMENT_DIGEST_MISMATCH
    # => []
end

# DATA LOADERS
# =================================================================================================

#! Saves storage slots data into memory and validates that the storage commitment matches the
#! sequential storage hash.
#!
#! Inputs:
#!   Operand stack: [STORAGE_COMMITMENT]
#!   Advice map: {
#!     STORAGE_COMMITMENT: [[STORAGE_SLOT_DATA]],
#!   }
#! Outputs:
#!   Operand stack: []
#!
#! Where:
#! - STORAGE_COMMITMENT is the commitment of the current account's storage.
#! - STORAGE_SLOT_DATA is the data contained in the storage slot which is constructed as follows:
#!   [SLOT_VALUE, slot_type, 0, 0, 0]
#!
#! Panics if:
#! - the number of account storage slots exceeded the maximum limit of 255.
#! - the computed account storage commitment does not match the provided account storage commitment
export.save_account_storage_data
    # move storage slot data from the advice map to the advice stack
    adv.push_mapvaln
    # OS => [STORAGE_COMMITMENT]
    # AS => [storage_slot_data_len, [STORAGE_SLOT_DATA]]

    # push the length of the storage slot data onto the operand stack and compute the number of
    # storage slots from it
    adv_push.1 div.ACCOUNT_STORAGE_SLOT_DATA_LENGTH
    # OS => [num_storage_slots, STORAGE_COMMITMENT]
    # AS => [[STORAGE_SLOT_DATA]]

    # assert that account does not exceed allowed maximum number of storage slots
    dup exec.get_max_num_storage_slots lte assert.err=ERR_ACCOUNT_TOO_MANY_STORAGE_SLOTS
    # OS => [num_storage_slots, STORAGE_COMMITMENT]
    # AS => [[STORAGE_SLOT_DATA]]

    # store number of storage slots in memory
    dup exec.memory::set_num_storage_slots
    # OS => [num_storage_slots, STORAGE_COMMITMENT]
    # AS => [[STORAGE_SLOT_DATA]]

    # setup acct_storage_slots_ptr and end_ptr for reading from advice stack
    mul.8 exec.memory::get_acct_storage_slots_section_ptr dup movdn.2 add swap
    # OS => [acct_storage_slots_ptr, end_ptr, STORAGE_COMMITMENT]
    # AS => [[STORAGE_SLOT_DATA]]

    # pad stack before reading from advice stack
    padw padw padw
    # OS => [PAD, PAD, PAD, acct_proc_offset, end_ptr, STORAGE_COMMITMENT]
    # AS => [[STORAGE_SLOT_DATA]]

    # read the data from advice stack to memory and hash
    exec.mem::pipe_double_words_to_memory
    # OS => [PERM, PERM, PERM, end_ptr', STORAGE_COMMITMENT]
    # AS => []

    # extract the digest
    exec.rpo::squeeze_digest
    # OS => [DIGEST, end_ptr', STORAGE_COMMITMENT]

    # drop end_ptr
    movup.4 drop
    # OS => [DIGEST, STORAGE_COMMITMENT]

    # verify hashed account storage slots match account storage commitment
    assert_eqw.err=ERR_ACCOUNT_STORAGE_COMMITMENT_MISMATCH
    # OS => []
end

#! Saves account procedure data into memory and validates that the code commitment matches the
#! sequential procedure root.
#!
#! Inputs:
#!   Operand stack: [CODE_COMMITMENT]
#!   Advice map: {
#!     CODE_COMMITMENT: [[ACCOUNT_PROCEDURE_DATA]],
#!   }
#! Outputs:
#!   Operand stack: []
#!
#! Where:
#! - CODE_COMMITMENT is the commitment of the current account's code.
#! - ACCOUNT_PROCEDURE_DATA is the information about account procedure which is constructed as
#!   follows: [PROCEDURE_MAST_ROOT, storage_offset, storage_size, 0, 0]
#!
#! Panics if:
#! - the number of account procedures exceeded the maximum limit of 256
#! - the computed account code commitment does not match the provided account code commitment
export.save_account_procedure_data
    # move procedure data from the advice map to the advice stack
    adv.push_mapvaln
    # OS => [CODE_COMMITMENT]
    # AS => [account_procedure_data_len, [ACCOUNT_PROCEDURE_DATA]]

    # push the length of the account procedure data onto the operand stack and compute the number of
    # procedures from it
    adv_push.1 div.ACCOUNT_PROCEDURE_DATA_LENGTH
    # OS => [num_procs, CODE_COMMITMENT]
    # AS => [[ACCOUNT_PROCEDURE_DATA]]

    # assert that account does not exceed allowed maximum number of procedures
    dup exec.get_max_num_procedures lte assert.err=ERR_ACCOUNT_TOO_MANY_PROCEDURES
    # OS => [num_procs, CODE_COMMITMENT]
    # AS => [[ACCOUNT_PROCEDURE_DATA]]

    # store number of procedures in memory
    dup exec.memory::set_num_account_procedures
    # OS => [num_procs, CODE_COMMITMENT]
    # AS => [[ACCOUNT_PROCEDURE_DATA]]

    # setup acct_proc_offset and end_ptr for reading from advice stack
    mul.8 exec.memory::get_acct_procedures_section_ptr dup movdn.2 add swap
    # OS => [acct_proc_offset, end_ptr, CODE_COMMITMENT]
    # AS => [[ACCOUNT_PROCEDURE_DATA]]

    # pad stack before reading from advice stack
    padw padw padw
    # OS => [PAD, PAD, PAD, acct_proc_offset, end_ptr, CODE_COMMITMENT]
    # AS => [[ACCOUNT_PROCEDURE_DATA]]

    # read the data from advice stack to memory and hash
    exec.mem::pipe_double_words_to_memory
    # OS => [PERM, PERM, PERM, end_ptr', CODE_COMMITMENT]
    # AS => []

    # extract the digest
    exec.rpo::squeeze_digest
    # OS => [DIGEST, end_ptr', CODE_COMMITMENT]

    # drop end_ptr
    movup.4 drop
    # OS => [DIGEST, CODE_COMMITMENT]

    # verify hashed account procedures match account code commitment
    assert_eqw.err=ERR_ACCOUNT_CODE_COMMITMENT_MISMATCH
    # OS => []
end

#Â HELPER PROCEDURES
# =================================================================================================

#! Sets an item in the account storage. Doesn't emit any events.
#!
#! Inputs:  [index, NEW_VALUE]
#! Outputs: [OLD_VALUE]
#!
#! Where:
#! - index is the index of the item to set.
#! - NEW_VALUE is the value to set.
#! - OLD_VALUE is the previous value of the item.
proc.set_item_raw
    # get old value from storage
    dup movdn.5 exec.get_item
    # => [OLD_VALUE, NEW_VALUE, index]

    # arrange stack for storage update
    swapw movup.8
    # => [index, NEW_VALUE, OLD_VALUE]

    # get account storage slots section offset
    exec.memory::get_acct_storage_slots_section_ptr
    # => [acct_storage_slots_section_offset, index, NEW_VALUE, OLD_VALUE]

    # update storage
    swap mul.8 add mem_storew
    # => [NEW_VALUE, OLD_VALUE]

    # drop value
    dropw
    # => [OLD_VALUE]
end

#! Returns the procedure metadata.
#!
#! Note:
#! - We assume that index has been validated and is within bounds.
#!
#! Inputs:  [index]
#! Outputs: [storage_offset, storage_size]
#!
#! Where:
#! - storage_offset is the procedure storage offset.
#! - storage_size is the number of storage slots the procedure is allowed to access.
proc.get_procedure_metadata
    # get procedure storage metadata pointer
    mul.8 exec.memory::get_acct_procedures_section_ptr add add.4
    # => [storage_offset_ptr]

    # load procedure metadata from memory and keep relevant data
    padw movup.4 mem_loadw drop drop swap
    # => [storage_offset, storage_size]
end

#! Returns the pointer to the next vacant memory slot if the account was not loaded before, and the
#! pointer to the account data otherwise.
#!
#! Inputs:  [foreign_account_id_prefix, foreign_account_id_suffix]
#! Outputs: [was_loaded, ptr, foreign_account_id_prefix, foreign_account_id_suffix]
#!
#! Where:
#! - foreign_account_id_{prefix,suffix} are the prefix and suffix felts of the ID of the foreign
#!   account whose procedure is going to be executed.
#! - was_loaded is the binary flag indicating whether the foreign account was already loaded to the
#!   memory.
#! - ptr is the memory pointer to the next empty memory slot or the memory pointer to the account
#!   data, depending on the value of the was_loaded flag.
#!
#! Panics if:
#! - the prefix or suffix of the provided foreign account ID equal zero.
#! - the maximum allowed number of foreign account to be loaded (64) was exceeded.
export.get_account_data_ptr
    # check that foreign account ID is not equal zero
    dup.1 eq.0 dup.1 eq.0 and not assert.err=ERR_FOREIGN_ACCOUNT_ID_IS_ZERO
    # => [foreign_account_id_prefix, foreign_account_id_suffix]

    # move pointer one account block back so that the first account pointer in the cycle will point
    # to the native account
    exec.memory::get_native_account_data_ptr exec.memory::get_account_data_length sub
    # => [curr_account_ptr, foreign_account_id_prefix, foreign_account_id_suffix]

    # push the flag to enter the loop
    push.1

    while.true
        # drop the flag left from the previous loop
        # in the first iteration this will be a pad element
        movup.3 drop
        # => [curr_account_ptr, foreign_account_id_prefix, foreign_account_id_suffix]

        # move the current account pointer to the next account data block
        exec.memory::get_account_data_length add
        # => [curr_account_ptr', foreign_account_id_prefix, foreign_account_id_suffix]

        # load the first data word at the current account pointer
        padw dup.4 mem_loadw
        # => [FIRST_DATA_WORD, curr_account_ptr', foreign_account_id_prefix, foreign_account_id_suffix]

        # check whether the last value in the word equals zero
        # if so it means this memory block was not yet initialized
        drop drop dup.1 eq.0
        # => [is_empty_block, maybe_account_id_prefix, maybe_account_id_suffix, curr_account_ptr', foreign_account_id_prefix, foreign_account_id_suffix]

        # check whether the current id matches the foreign id
        movdn.2 dup.5 dup.5 exec.is_id_equal
        # => [is_equal_id, is_empty_word, curr_account_ptr', foreign_account_id_prefix, foreign_account_id_suffix]

        # get the loop flag
        # it equals 1 if both `is_equal_id` and `is_empty_block` flags are equal to 0, so we should
        # continue iterating
        dup movdn.5 or not
        # => [loop_flag, curr_account_ptr', foreign_account_id_prefix, foreign_account_id_suffix, is_equal_id]
    end

    # check that the loading of one more account won't exceed the maximum number of the foreign
    # accounts which can be loaded.
    dup exec.memory::get_max_foreign_account_ptr lte
    assert.err=ERR_FOREIGN_ACCOUNT_MAX_NUMBER_EXCEEDED
    # => [curr_account_ptr, foreign_account_id_prefix, foreign_account_id_suffix, is_equal_id]

    # the resulting `was_loaded` flag is essentially equal to the `is_equal_id` flag
    movup.3
    # => [was_loaded, curr_account_ptr, foreign_account_id_prefix, foreign_account_id_suffix]
end

#! Checks that the state of the current foreign account is valid.
#!
#! Inputs:  []
#! Outputs: []
#!
#! Panics if:
#! - the hash of the current account is not represented in the account database.
export.validate_current_foreign_account
    # get the account database root
    exec.memory::get_acct_db_root
    # => [ACCOUNT_DB_ROOT]

    # get the current account ID
    push.0.0 exec.memory::get_account_id
    # => [account_id_prefix, account_id_suffix, 0, 0, ACCOUNT_DB_ROOT]

    # retrieve the commitment of the foreign account from the current account tree
    # this would abort if the proof for the commitment was invalid for the account root,
    # so this implicitly verifies its correctness
    exec.smt::get
    # => [FOREIGN_ACCOUNT_COMMITMENT, ACCOUNT_DB_ROOT]

    # get the foreign account's commitment from memory and compare with the verified commitment
    exec.get_current_commitment assert_eqw.err=ERR_FOREIGN_ACCOUNT_INVALID_COMMITMENT
    # => [ACCOUNT_DB_ROOT]

    # clean the stack
    dropw
end

#! Hashes the provided map key before using it as the key in an SMT.
#!
#! Because the keys of the map are user-chosen and thus not necessarily uniformly distributed, the
#! tree could be imbalanced and made less efficient. To mitigate that, the keys used in the
#! storage map are hashed before they are inserted into the SMT, which creates a uniform distribution.
#!
#! Inputs:  [KEY]
#! Outputs: [HASHED_KEY]
proc.hash_map_key
    hash
    # => [HASHED_KEY]
end
