use.kernel::account
use.kernel::constants

use.std::crypto::hashes::rpo

# ERRORS
# =================================================================================================

# Number of assets in a note exceed 255
const.ERR_NOTE_NUM_OF_ASSETS_EXCEED_LIMIT=0x00020108

# The current account is not native
const.ERR_ACCOUNT_IS_NOT_NATIVE=0x00020148

# Depth of the nested FPI calls exceeded 64
const.ERR_ACCOUNT_STACK_OVERFLOW=0x00020155

# Failed to end foreign context because the current account is the native account
const.ERR_ACCOUNT_STACK_UNDERFLOW=0x00020156

# Creation of a foreign context against the native account is forbidden
const.ERR_FOREIGN_ACCOUNT_CONTEXT_AGAINST_NATIVE_ACCOUNT=0x00020180

# MEMORY ADDRESS CONSTANTS
# =================================================================================================

# BOOK KEEPING
# -------------------------------------------------------------------------------------------------

# The memory address at which the transaction vault root is stored.
const.TX_VAULT_ROOT_PTR=0

# The memory address at which a pointer to the input note being executed is stored.
const.CURRENT_INPUT_NOTE_PTR=4

# The memory address at which the number of output notes is stored.
const.NUM_OUTPUT_NOTES_PTR=8

# The memory address at which the input vault root is stored.
const.INPUT_VAULT_ROOT_PTR=12

# The memory address at which the output vault root is stored.
const.OUTPUT_VAULT_ROOT_PTR=16

# The memory address at which the native account's new code commitment is stored.
const.NEW_CODE_ROOT_PTR=20

# The memory address at which the absolute expiration block number is stored.
const.TX_EXPIRATION_BLOCK_NUM_PTR=24

# The memory address at which the pointer to the account stack element containing the pointer to the 
# currently accessing account data is stored.
const.ACCOUNT_STACK_TOP_PTR=28

# Pointer to the first element on the account stack.
const.MIN_ACCOUNT_STACK_PTR=29

# Pointer to the last element on the account stack.
const.MAX_ACCOUNT_STACK_PTR=92

# GLOBAL INPUTS
# -------------------------------------------------------------------------------------------------

# The memory address at which the global inputs section begins.
const.GLOBAL_INPUTS_SECTION_OFFSET=400

# The memory address at which the transaction reference block's commitment is stored.
const.BLOCK_COMMITMENT_PTR=400

# The memory address at which the account ID felts are stored.
const.ACCT_ID_PTR=404

# The memory address at which the initial account commitment is stored.
const.INIT_ACCOUNT_COMMITMENT_PTR=408

# The memory address at which the input notes commitment is stored.
const.INPUT_NOTES_COMMITMENT_PTR=412

# The memory address at which the initial nonce is stored.
const.INIT_NONCE_PTR=416

# The memory address at which the transaction script mast root is stored.
const.TX_SCRIPT_ROOT_PTR=420

# GLOBAL BLOCK DATA
# -------------------------------------------------------------------------------------------------

# The memory address at which the block data section begins
const.BLOCK_DATA_SECTION_OFFSET=800

# The memory address at which the previous block commitment is stored
const.PREV_BLOCK_COMMITMENT_PTR=800

# The memory address at which the chain commitment is stored
const.CHAIN_COMMITMENT_PTR=804

# The memory address at which the account root is stored
const.ACCT_DB_ROOT_PTR=808

# The memory address at which the nullifier root is stored
const.NULLIFIER_ROOT_PTR=812

# The memory address at which the tx commitment is stored
const.TX_COMMITMENT_PTR=816

# The memory address at which the kernel commitment is stored
const.TX_KERNEL_COMMITMENT_PTR=820

# The memory address at which the proof commitment is stored
const.PROOF_COMMITMENT_PTR=824

# The memory address at which the block metadata is stored [block_number, version, timestamp, 0]
const.BLOCK_METADATA_PTR=828

# The memory address at which the note root is stored
const.NOTE_ROOT_PTR=832

# CHAIN MMR
# -------------------------------------------------------------------------------------------------

# The memory address at which the chain data section begins
const.CHAIN_MMR_PTR=1200

# The memory address at which the total number of leaves in the chain MMR is stored
const.CHAIN_MMR_NUM_LEAVES_PTR=1200

# The memory address at which the chain mmr peaks are stored
const.CHAIN_MMR_PEAKS_PTR=1204

# KERNEL DATA
# -------------------------------------------------------------------------------------------------

# The memory address at which the number of the procedures of the selected kernel is stored.
const.NUM_KERNEL_PROCEDURES_PTR=1600

# The memory address at which the hashes of kernel procedures begin.
# TODO: choose the proper memory location for the kernel procedures.
const.KERNEL_PROCEDURES_PTR=1604

# ACCOUNT DATA
# -------------------------------------------------------------------------------------------------

# The largest memory address which can be used to load the foreign account data.
# It is computed as `2048 * 64 * 4` -- this is the memory address where the data block of the 64th
# account starts.
const.MAX_FOREIGN_ACCOUNT_PTR=524288

# The memory address at which the native account data is stored.
const.NATIVE_ACCOUNT_DATA_PTR=8192

# The length of the memory interval that the account data occupies.
const.ACCOUNT_DATA_LENGTH=8192

# The offsets at which the account data is stored relative to the start of the account data segment.
const.ACCT_ID_AND_NONCE_OFFSET=0
const.ACCT_VAULT_ROOT_OFFSET=4
const.ACCT_STORAGE_COMMITMENT_OFFSET=8
const.ACCT_CODE_COMMITMENT_OFFSET=12
const.ACCT_CORE_DATA_SECTION_END_OFFSET=16
const.NUM_ACCT_PROCEDURES_OFFSET=28
const.ACCT_PROCEDURES_SECTION_OFFSET=32
const.NUM_ACCT_STORAGE_SLOTS_OFFSET=2084
const.ACCT_STORAGE_SLOTS_SECTION_OFFSET=2088

# INPUT NOTES DATA
# -------------------------------------------------------------------------------------------------

# The memory address at which the input note section begins.
const.INPUT_NOTE_SECTION_OFFSET=4194304

# The memory address at which the nullifier section of the input notes begins.
const.INPUT_NOTE_NULLIFIER_SECTION_PTR=4194308

# The memory address at which the input note data section begins.
const.INPUT_NOTE_DATA_SECTION_OFFSET=4259840

# The memory address at which the number of input notes is stored.
const.NUM_INPUT_NOTES_PTR=INPUT_NOTE_SECTION_OFFSET

# The offsets at which data of an input note is stored relative to the start of its data segment
const.INPUT_NOTE_ID_OFFSET=0
const.INPUT_NOTE_CORE_DATA_OFFSET=4
const.INPUT_NOTE_SERIAL_NUM_OFFSET=4
const.INPUT_NOTE_SCRIPT_ROOT_OFFSET=8
const.INPUT_NOTE_INPUTS_COMMITMENT_OFFSET=12
const.INPUT_NOTE_ASSETS_HASH_OFFSET=16
const.INPUT_NOTE_METADATA_OFFSET=20
const.INPUT_NOTE_ARGS_OFFSET=24
const.INPUT_NOTE_NUM_ASSETS_OFFSET=28
const.INPUT_NOTE_ASSETS_OFFSET=32

# OUTPUT NOTES
# -------------------------------------------------------------------------------------------------

# The memory address at which the output notes section begins.
const.OUTPUT_NOTE_SECTION_OFFSET=16777216

# The offsets at which data of an output note is stored relative to the start of its data segment.
const.OUTPUT_NOTE_ID_OFFSET=0
const.OUTPUT_NOTE_METADATA_OFFSET=4
const.OUTPUT_NOTE_RECIPIENT_OFFSET=8
const.OUTPUT_NOTE_ASSETS_HASH_OFFSET=12
const.OUTPUT_NOTE_NUM_ASSETS_OFFSET=16
const.OUTPUT_NOTE_ASSETS_OFFSET=20

# USER-DEFINED ASSETS
# -------------------------------------------------------------------------------------------------

# Asset Section Layout
# ID_SEED,
# num_created_assets,
# next_asset_ptr,
# 0,
# 0,
# 0..256 -> asset ptrs (256)
# 256..288 -> one time witnesses (32)
# 288.. -> <asset_data>

const.ASSET_ID_SEED_PTR=33554432
const.ASSET_NUM_CREATED=33554436
const.ASSET_NEXT_OFFSET_PTR=33554437
const.ASSET_PTR_MAP_MIN=33554440
const.ASSET_PTR_MAP_MAX=33554696
const.ASSET_OTW=33554696
const.ASSET_MIN_PTR=33554728

# Asset Memory Layout
# [
#   ASSET_ID,
#   BOOKKEEPING = [
#     issuer_id_prefix,
#     issuer_id_suffix, # optimization: type_id can be included in suffix
#     type_id,
#     num_fields
#   ],
#   field_0,
#   field_1,
#   ...,
#   field_n
# ]

# The size of each asset's bookkeeping section, including the asset ID.
const.ASSET_BOOKKEEPING_SIZE=8
const.ASSET_ISSUER_PREFIX_OFFSET=4
const.ASSET_ISSUER_SUFFIX_OFFSET=5
const.ASSET_TYPE_ID_OFFSET=6
const.ASSET_NUM_FIELDS_OFFSET=7

# MEMORY PROCEDURES
# =================================================================================================

# BOOK KEEPING
# -------------------------------------------------------------------------------------------------

#! Returns the number of output notes.
#!
#! Inputs:  []
#! Outputs: [num_output_notes]
#!
#! Where:
#! - num_output_notes is the number of output notes.
export.get_num_output_notes
    push.NUM_OUTPUT_NOTES_PTR mem_load
end

#! Sets the number of output notes.
#!
#! Inputs:  [num_output_notes]
#! Outputs: []
#!
#! Where:
#! - num_output_notes is the number of output notes.
export.set_num_output_notes
    push.NUM_OUTPUT_NOTES_PTR mem_store
end

#! Returns a pointer to the input note being executed.
#!
#! Inputs:  []
#! Outputs: [note_ptr]
#!
#! Where:
#! - note_ptr is the memory address of the data segment for the current input note.
export.get_current_input_note_ptr
    push.CURRENT_INPUT_NOTE_PTR mem_load
end

#! Sets the current input note pointer to the input note being executed.
#!
#! Inputs:  [note_ptr]
#! Outputs: []
#!
#! Where:
#! - note_ptr is the new memory address of the data segment for the input note.
export.set_current_input_note_ptr
    push.CURRENT_INPUT_NOTE_PTR mem_store
end

#! Returns a pointer to the memory address at which the input vault root is stored.
#!
#! Inputs:  []
#! Outputs: [input_vault_root_ptr]
#!
#! Where:
#! - input_vault_root_ptr is a pointer to the memory address at which the input vault root is
#!   stored.
export.get_input_vault_root_ptr
    push.INPUT_VAULT_ROOT_PTR
end

#! Returns the input vault root.
#!
#! Inputs:  []
#! Outputs: [INPUT_VAULT_ROOT]
#!
#! Where:
#! - INPUT_VAULT_ROOT is the input vault root.
export.get_input_vault_root
    padw push.INPUT_VAULT_ROOT_PTR mem_loadw
end

#! Sets the input vault root.
#!
#! Inputs:  [INPUT_VAULT_ROOT]
#! Outputs: [INPUT_VAULT_ROOT]
#!
#! Where:
#! - INPUT_VAULT_ROOT is the input vault root.
export.set_input_vault_root
    push.INPUT_VAULT_ROOT_PTR
    mem_storew
end

#! Returns a pointer to the memory address at which the output vault root is stored.
#!
#! Inputs:  []
#! Outputs: [output_vault_root_ptr]
#!
#! Where:
#! - output_vault_root_ptr is the pointer to the memory address at which the output vault root is
#!   stored.
export.get_output_vault_root_ptr
    push.OUTPUT_VAULT_ROOT_PTR
end

#! Returns the output vault root.
#!
#! Inputs:  []
#! Outputs: [OUTPUT_VAULT_ROOT]
#!
#! Where:
#! - OUTPUT_VAULT_ROOT is the output vault root.
export.get_output_vault_root
    padw push.OUTPUT_VAULT_ROOT_PTR mem_loadw
end

#! Sets the output vault root.
#!
#! Inputs:  [OUTPUT_VAULT_ROOT]
#! Outputs: [OUTPUT_VAULT_ROOT]
#!
#! Where:
#! - OUTPUT_VAULT_ROOT is the output vault root.
export.set_output_vault_root
    push.OUTPUT_VAULT_ROOT_PTR
    mem_storew
end

# GLOBAL INPUTS
# -------------------------------------------------------------------------------------------------

#! Sets the commitment of the transaction reference block.
#!
#! Inputs:  [BLOCK_COMMITMENT]
#! Outputs: [BLOCK_COMMITMENT]
#!
#! Where:
#! - BLOCK_COMMITMENT is the commitment of the transaction reference block.
export.set_block_commitment
    push.BLOCK_COMMITMENT_PTR
    mem_storew
end

#! Returns the block commitment of the reference block.
#!
#! Inputs:  []
#! Outputs: [BLOCK_COMMITMENT]
#!
#! Where:
#! - BLOCK_COMMITMENT is the commitment of the transaction reference block.
export.get_block_commitment
    padw push.BLOCK_COMMITMENT_PTR mem_loadw
end

#! Sets the account ID.
#!
#! Inputs:  [acct_id_prefix, acct_id_suffix]
#! Outputs: []
#!
#! Where:
#! - acct_id_{prefix,suffix} are the prefix and suffix felts of the account ID.
export.set_global_acct_id
    push.0.0
    # => [0, 0, acct_id_prefix, acct_id_suffix]
    mem_storew.ACCT_ID_PTR
    dropw
    # => []
end

#! Returns the global account ID.
#!
#! Inputs:  []
#! Outputs: [acct_id_prefix, acct_id_suffix]
#!
#! Where:
#! - acct_id_{prefix,suffix} are the prefix and suffix felts of the account ID.
export.get_global_acct_id
    padw mem_loadw.ACCT_ID_PTR
    # => [0, 0, acct_id_prefix, acct_id_suffix]
    drop drop
end

#! Sets the initial account commitment.
#!
#! Inputs:  [INIT_ACCOUNT_COMMITMENT]
#! Outputs: [INIT_ACCOUNT_COMMITMENT]
#!
#! Where:
#! - INIT_ACCOUNT_COMMITMENT is the initial account commitment.
export.set_init_account_commitment
    push.INIT_ACCOUNT_COMMITMENT_PTR
    mem_storew
end

#! Returns the initial account commitment.
#!
#! Inputs:  []
#! Outputs: [INIT_ACCOUNT_COMMITMENT]
#!
#! Where:
#! - INIT_ACCOUNT_COMMITMENT is the initial account commitment.
export.get_init_account_commitment
    padw push.INIT_ACCOUNT_COMMITMENT_PTR mem_loadw
end

#! Returns the input notes commitment.
#!
#! See `transaction::api::get_input_notes_commitment` for details.
#!
#! Inputs:  []
#! Outputs: [INPUT_NOTES_COMMITMENT]
#!
#! Where:
#! - INPUT_NOTES_COMMITMENT is the input notes commitment.
export.get_input_notes_commitment
    padw push.INPUT_NOTES_COMMITMENT_PTR mem_loadw
end

#! Sets the input notes' commitment.
#!
#! Inputs:  [INPUT_NOTES_COMMITMENT]
#! Outputs: [INPUT_NOTES_COMMITMENT]
#!
#! Where:
#! - INPUT_NOTES_COMMITMENT is the notes' commitment.
export.set_nullifier_commitment
    push.INPUT_NOTES_COMMITMENT_PTR
    mem_storew
end

#! Returns the initial account nonce.
#!
#! Inputs:  []
#! Outputs: [init_nonce]
#!
#! Where:
#! - init_nonce is the initial account nonce.
export.get_init_nonce
    push.INIT_NONCE_PTR mem_load
end

#! Sets the initial account nonce.
#!
#! Inputs:  [init_nonce]
#! Outputs: []
#!
#! Where:
#! - init_nonce is the initial account nonce.
export.set_init_nonce
    push.INIT_NONCE_PTR mem_store
end

#! Returns a memory address of the transaction script root.
#!
#! Inputs:  []
#! Outputs: [tx_script_root_ptr]
#!
#! Where:
#! - tx_script_root_ptr is the pointer to the memory where transaction script root is stored.
export.get_tx_script_root_ptr
    push.TX_SCRIPT_ROOT_PTR
end

#! Sets the transaction script root.
#!
#! Inputs:  [TX_SCRIPT_ROOT]
#! Outputs: [TX_SCRIPT_ROOT]
#!
#! Where:
#! - TX_SCRIPT_ROOT is the transaction script root.
export.set_tx_script_root
    push.TX_SCRIPT_ROOT_PTR
    mem_storew
end

# BLOCK DATA
# -------------------------------------------------------------------------------------------------

#! Returns a pointer to the block data section.
#!
#! Inputs:  []
#! Outputs: [ptr]
#!
#! Where:
#! - ptr is a pointer to the block data section.
export.get_block_data_ptr
    push.BLOCK_DATA_SECTION_OFFSET
end

#! Returns the previous block commitment of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [PREV_BLOCK_COMMITMENT]
#!
#! Where:
#! - PREV_BLOCK_COMMITMENT_PTR is the block commitment of the transaction reference block.
export.get_prev_block_commitment
    padw push.PREV_BLOCK_COMMITMENT_PTR mem_loadw
end

#! Returns the block number of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [blk_num]
#!
#! Where:
#! - blk_num is the block number of the transaction reference block.
export.get_blk_num
    push.BLOCK_METADATA_PTR mem_load
end

#! Returns the protocol version of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [version]
#!
#! Where:
#! - version is the protocol version of the transaction reference block.
export.get_blk_version
    padw push.BLOCK_METADATA_PTR mem_loadw drop drop swap drop
end

#! Returns the block timestamp of the reference block for this transaction.
#!
#! Inputs:  []
#! Outputs: [timestamp]
#!
#! Where:
#! - timestamp is the timestamp of the reference block for this transaction.
export.get_blk_timestamp
    padw push.BLOCK_METADATA_PTR mem_loadw drop movdn.2 drop drop
end

#! Returns the chain commitment of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [CHAIN_COMMITMENT]
#!
#! Where:
#! - CHAIN_COMMITMENT is the chain commitment of the transaction reference block.
export.get_chain_commitment
    padw push.CHAIN_COMMITMENT_PTR mem_loadw
end

#! Returns the account db root of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [ACCT_DB_ROOT]
#!
#! Where:
#! - ACCT_DB_ROOT is the account database root of the transaction reference block.
export.get_acct_db_root
    padw push.ACCT_DB_ROOT_PTR mem_loadw
end

#! Returns the nullifier db root of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [NULLIFIER_ROOT]
#!
#! Where:
#! - NULLIFIER_ROOT is the nullifier root of the transaction reference block.
export.get_nullifier_db_root
    padw push.NULLIFIER_ROOT_PTR mem_loadw
end

#! Returns the tx commitment of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [TX_COMMITMENT]
#!
#! Where:
#! - TX_COMMITMENT is the tx commitment of the transaction reference block.
export.get_tx_commitment
    padw push.TX_COMMITMENT_PTR mem_loadw
end

#! Returns the transaction kernel commitment of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [TX_KERNEL_COMMITMENT]
#!
#! Where:
#! - TX_KERNEL_COMMITMENT is an accumulative hash from all kernel commitments.
export.get_tx_kernel_commitment
    padw push.TX_KERNEL_COMMITMENT_PTR mem_loadw
end

#! Returns the proof commitment of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [PROOF_COMMITMENT]
#!
#! Where:
#! - PROOF_COMMITMENT is the proof commitment of the transaction reference block.
export.get_proof_commitment
    padw push.PROOF_COMMITMENT_PTR mem_loadw
end

#! Returns the note root of the transaction reference block.
#!
#! Inputs:  []
#! Outputs: [NOTE_ROOT]
#!
#! Where:
#! - NOTE_ROOT is the note root of the transaction reference block.
export.get_note_root
    padw push.NOTE_ROOT_PTR mem_loadw
end

#! Sets the note root of the transaction reference block.
#!
#! Inputs:  [NOTE_ROOT]
#! Outputs: [NOTE_ROOT]
#!
#! Where:
#! - NOTE_ROOT is the note root of the transaction reference block.
export.set_note_root
    push.NOTE_ROOT_PTR
    mem_storew
end

# CHAIN DATA
# -------------------------------------------------------------------------------------------------

#! Returns a pointer to the chain MMR section.
#!
#! Inputs:  []
#! Outputs: [ptr]
#!
#! Where:
#! - ptr is the pointer to the chain MMR section.
export.get_chain_mmr_ptr
    push.CHAIN_MMR_PTR
end

#! Sets the number of leaves in the chain MMR.
#!
#! Inputs:  [num_leaves]
#! Outputs: []
#!
#! Where:
#! - num_leaves is the number of leaves in the chain MMR.
export.set_chain_mmr_num_leaves
    push.CHAIN_MMR_NUM_LEAVES_PTR mem_store
end

#! Returns a pointer to start of the chain MMR peaks section.
#!
#! Inputs:  []
#! Outputs: [ptr]
#!
#! Where:
#! - ptr is the pointer to the start of the chain MMR peaks section.
export.get_chain_mmr_peaks_ptr
    push.CHAIN_MMR_PEAKS_PTR
end

# ACCOUNT DATA
# -------------------------------------------------------------------------------------------------

#! Returns the memory pointer at which the native account data is stored.
#!
#! Inputs:  []
#! Outputs: [ptr]
#!
#! Where:
#! - ptr is the memory address at which the native account data is stored.
export.get_native_account_data_ptr
    push.NATIVE_ACCOUNT_DATA_PTR
end

#! Returns the length of the memory interval that the account data occupies.
#!
#! Inputs:  []
#! Outputs: [acct_data_length]
#!
#! Where:
#! - acct_data_length is the length of the memory interval that the account data occupies.
export.get_account_data_length
    push.ACCOUNT_DATA_LENGTH
end

#! Returns the largest memory address which can be used to load the foreign account data.
#!
#! Inputs:  []
#! Outputs: [max_foreign_acct_ptr]
#!
#! Where:
#! - max_foreign_acct_ptr is the largest memory address which can be used to load the foreign
#!   account data.
export.get_max_foreign_account_ptr
    push.MAX_FOREIGN_ACCOUNT_PTR
end

#! Sets the memory pointer of the current account data to the native account (8192).
#!
#! Inputs:  []
#! Outputs: []
export.set_current_account_data_ptr_to_native_account
    # get the pointer to the first stack element where pointer to the native account data should be 
    # stored
    push.ACCOUNT_STACK_TOP_PTR
    push.MIN_ACCOUNT_STACK_PTR
    # => [native_acct_stack_ptr, account_stack_top_ptr]

    # store the native account data pointer into the first stack element.
    push.NATIVE_ACCOUNT_DATA_PTR dup.1 mem_store
    # => [native_acct_stack_ptr, account_stack_top_ptr]

    # store the pointer to the first account stack element at the account stack top 
    # pointer.
    swap mem_store
    # => []
end

#! Returns the memory pointer of the current account data.
#!
#! Inputs:  []
#! Outputs: [ptr]
#!
#! Where:
#! - ptr is the memory address at which the data of the currently used account begins.
export.get_current_account_data_ptr
    push.ACCOUNT_STACK_TOP_PTR mem_load
    # => [account_stack_top_ptr]

    mem_load
    # => [current_account_data_ptr]
end

#! Adds the pointer to the account stack.
#!
#! It is done by writing the pointer to the element next to the stack top and moving the top pointer
#! to it.
#!
#! Inputs:  [curr_account_data_ptr]
#! Outputs: []
#!
#! Where:
#! - curr_account_data_ptr is the memory address
#!
#! Panics if:
#! - the account stack is full, containing 64 accounts total.
#! - the provided account data pointer is equal to the native account data pointer.
export.push_ptr_to_account_stack
    # check that the account stack is not full
    push.ACCOUNT_STACK_TOP_PTR mem_load dup push.MAX_ACCOUNT_STACK_PTR
    lt assert.err=ERR_ACCOUNT_STACK_OVERFLOW
    # => [account_stack_top_ptr, curr_account_data_ptr]

    # check that the current account data pointer is not equal to the native account data pointer
    dup.1 push.NATIVE_ACCOUNT_DATA_PTR eq 
    assertz.err=ERR_FOREIGN_ACCOUNT_CONTEXT_AGAINST_NATIVE_ACCOUNT
    # => [account_stack_top_ptr, curr_account_data_ptr]

    add.1 dup movdn.2 mem_store
    # => [account_stack_top_ptr+1]

    push.ACCOUNT_STACK_TOP_PTR mem_store
    # => []
end

#! Removes the pointer from the account stack.
#!
#! It is done simply by moving the stack top pointer one element back.
#!
#! Inputs:  []
#! Outputs: []
#!
#! Panics if:
#! - the account stack contains only native account.
export.pop_ptr_from_account_stack
    # check that the account stack always is at least of size 1, that is, it contains at least the
    # native account
    push.ACCOUNT_STACK_TOP_PTR mem_load dup push.MIN_ACCOUNT_STACK_PTR
    gt assert.err=ERR_ACCOUNT_STACK_UNDERFLOW
    # => [account_stack_top_ptr]

    # move the account stack pointer one element back and store it as the top pointer
    sub.1 push.ACCOUNT_STACK_TOP_PTR mem_store
    # => []
end

#! Asserts that current account data pointer matches the data pointer of the native account (8192).
#! It is used to prevent usage of the account procedures which can mutate the account state with the
#! foreign accounts.
#!
#! Inputs:  []
#! Outputs: []
#!
#! Panics if:
#! - the current account data pointer is not equal to native account data pointer (8192).
export.assert_native_account
    exec.get_current_account_data_ptr
    push.NATIVE_ACCOUNT_DATA_PTR
    assert_eq.err=ERR_ACCOUNT_IS_NOT_NATIVE
end

#! Returns a pointer to the end of the core account data section.
#!
#! Inputs:  []
#! Outputs: [ptr]
#!
#! Where:
#! - ptr is the memory address at which the core account data ends.
export.get_core_acct_data_end_ptr
    exec.get_current_account_data_ptr push.ACCT_CORE_DATA_SECTION_END_OFFSET add
end

### ACCOUNT ID AND NONCE #################################################

#! Returns the id of the current account.
#!
#! Inputs:  []
#! Outputs: [curr_acct_id_prefix, curr_acct_id_suffix]
#!
#! Where:
#! - curr_acct_id_{prefix,suffix} are the prefix and suffix felts of the account ID of the currently
#!   accessing account.
export.get_account_id
    padw exec.get_current_account_data_ptr push.ACCT_ID_AND_NONCE_OFFSET add mem_loadw
    # => [nonce, 0, curr_acct_id_prefix, curr_acct_id_suffix]
    drop drop
    # => [curr_acct_id_prefix, curr_acct_id_suffix]
end

#! Sets the account ID and nonce.
#!
#! Inputs:  [account_nonce, 0, account_id_prefix, account_id_suffix]
#! Outputs: [account_nonce, 0, account_id_prefix, account_id_suffix]
#!
#! Where:
#! - account_id_{prefix,suffix} are the prefix and suffix felts of the id of the currently accessing
#!   account.
#! - account_nonce is the nonce of the currently accessing account.
export.set_acct_id_and_nonce
    exec.get_current_account_data_ptr push.ACCT_ID_AND_NONCE_OFFSET add
    mem_storew
end

#! Returns the id of the native account.
#!
#! Inputs:  []
#! Outputs: [native_acct_id_prefix, native_acct_id_suffix]
#!
#! Where:
#! - native_acct_id_{prefix,suffix} are the prefix and suffix felts of the id of the native account.
export.get_native_account_id
    padw push.NATIVE_ACCOUNT_DATA_PTR push.ACCT_ID_AND_NONCE_OFFSET add mem_loadw
    # => [nonce, 0, native_acct_id_prefix, native_acct_id_suffix]
    drop drop
    # => [native_acct_id_prefix, native_acct_id_suffix]
end

#! Returns the account nonce.
#!
#! Inputs:  []
#! Outputs: [acct_nonce]
#!
#! Where:
#! - acct_nonce is the account nonce.
export.get_acct_nonce
    padw
    exec.get_current_account_data_ptr push.ACCT_ID_AND_NONCE_OFFSET add
    mem_loadw
    movdn.3 drop drop drop
end

#! Sets the account nonce.
#!
#! Inputs:  [acct_nonce]
#! Outputs: []
#!
#! Where:
#! - acct_nonce is the account nonce.
export.set_acct_nonce
    exec.get_current_account_data_ptr push.ACCT_ID_AND_NONCE_OFFSET add padw
    # => [0, 0, 0, 0, acct_id_and_nonce_ptr, new_nonce]
    dup.4 mem_loadw
    # => [old_nonce, 0, old_id_prefix, old_id_suffix, acct_id_and_nonce_ptr, new_nonce]
    drop movup.4 movup.4 mem_storew dropw
    # => []
end

### ACCOUNT VAULT #################################################

#! Returns the memory pointer to the account vault root.
#!
#! Inputs:  []
#! Outputs: [acct_vault_root_ptr]
#!
#! Where:
#! - acct_vault_root_ptr is the memory pointer to the account asset vault root.
export.get_acct_vault_root_ptr
    exec.get_current_account_data_ptr push.ACCT_VAULT_ROOT_OFFSET add
end

#! Returns the account vault root.
#!
#! Inputs:  []
#! Outputs: [ACCT_VAULT_ROOT]
#!
#! Where:
#! - ACCT_VAULT_ROOT is the account asset vault root.
export.get_acct_vault_root
    padw
    exec.get_current_account_data_ptr push.ACCT_VAULT_ROOT_OFFSET add
    mem_loadw
end

#! Sets the account vault root.
#!
#! Inputs:  [ACCT_VAULT_ROOT]
#! Outputs: [ACCT_VAULT_ROOT]
#!
#! Where:
#! - ACCT_VAULT_ROOT is the account vault root to be set.
export.set_acct_vault_root
    exec.get_current_account_data_ptr push.ACCT_VAULT_ROOT_OFFSET add
    mem_storew
end

#! Returns the native account's vault root.
#!
#! Inputs:  []
#! Outputs: [ACCT_VAULT_ROOT]
#!
#! Where:
#! - ACCT_VAULT_ROOT is the account asset vault root.
export.get_native_account_vault_root
    padw
    exec.get_native_account_data_ptr push.ACCT_VAULT_ROOT_OFFSET add
    mem_loadw
end

#! Sets the native account's vault root.
#!
#! Inputs:  [ACCT_VAULT_ROOT]
#! Outputs: [ACCT_VAULT_ROOT]
#!
#! Where:
#! - ACCT_VAULT_ROOT is the account asset vault root.
export.set_native_account_vault_root
    exec.get_native_account_data_ptr push.ACCT_VAULT_ROOT_OFFSET add
    mem_storew
end

### ACCOUNT CODE #################################################

#! Returns the code commitment of the account.
#!
#! Inputs:  []
#! Outputs: [CODE_COMMITMENT]
#!
#! Where:
#! - CODE_COMMITMENT is the code commitment of the account.
export.get_acct_code_commitment
    padw
    exec.get_current_account_data_ptr push.ACCT_CODE_COMMITMENT_OFFSET add
    mem_loadw
end

#! Sets the code commitment of the account.
#!
#! Inputs:  [CODE_COMMITMENT]
#! Outputs: [CODE_COMMITMENT]
#!
#! Where:
#! - CODE_COMMITMENT is the code commitment to be set.
export.set_acct_code_commitment
    exec.get_current_account_data_ptr push.ACCT_CODE_COMMITMENT_OFFSET add
    mem_storew
end

#! Returns the new account code commitment.
#!
#! Inputs:  []
#! Outputs: [CODE_COMMITMENT]
#!
#! Where:
#! - CODE_COMMITMENT is the new account code commitment.
export.get_new_acct_code_commitment
    padw
    push.NEW_CODE_ROOT_PTR
    mem_loadw
end

#! Stores the new account code commitment in memory.
#!
#! Inputs:  [CODE_COMMITMENT]
#! Outputs: [CODE_COMMITMENT]
#!
#! Where:
#! - CODE_COMMITMENT is the new account code commitment.
export.set_new_acct_code_commitment
    push.NEW_CODE_ROOT_PTR
    mem_storew
end

#! Sets the transaction expiration block number.
#!
#! Inputs:  [tx_expiration_block_num]
#! Outputs: []
#!
#! Where:
#! - tx_expiration_block_num is the number of the transaction expiration block.
export.set_expiration_block_num
    push.TX_EXPIRATION_BLOCK_NUM_PTR mem_store
end

#! Gets the transaction expiration block number.
#!
#! Inputs:  []
#! Outputs: [tx_expiration_block_num]
#!
#! Where:
#! - tx_expiration_block_num is the number of the transaction expiration block.
export.get_expiration_block_num
    push.TX_EXPIRATION_BLOCK_NUM_PTR mem_load
end

#! Returns the number of procedures contained in the account code.
#!
#! Inputs:  []
#! Outputs: [num_procedures]
#!
#! Where:
#! - num_procedures is the number of procedures contained in the account code.
export.get_num_account_procedures
    exec.get_current_account_data_ptr push.NUM_ACCT_PROCEDURES_OFFSET add
    mem_load
end

#! Sets the number of procedures contained in the account code.
#!
#! Inputs:  [num_procedures]
#! Outputs: []
#!
#! Where:
#! - num_procedures is the number of procedures contained in the account code.
export.set_num_account_procedures
    exec.get_current_account_data_ptr push.NUM_ACCT_PROCEDURES_OFFSET add
    mem_store
end

#! Returns the memory pointer to the account procedures section.
#!
#! Inputs:  []
#! Outputs: [account_procedures_section_ptr]
#!
#! Where:
#! - account_procedures_section_ptr is the memory pointer to the account procedures section.
export.get_acct_procedures_section_ptr
    exec.get_current_account_data_ptr push.ACCT_PROCEDURES_SECTION_OFFSET add
end

### ACCOUNT STORAGE #################################################

#! Returns the account storage commitment.
#!
#! Inputs:  []
#! Outputs: [STORAGE_COMMITMENT]
#!
#! Where:
#! - STORAGE_COMMITMENT is the account storage commitment.
export.get_acct_storage_commitment
    padw
    exec.get_current_account_data_ptr push.ACCT_STORAGE_COMMITMENT_OFFSET add
    mem_loadw
end

#! Sets the account storage commitment.
#!
#! Inputs:  [STORAGE_COMMITMENT]
#! Outputs: [STORAGE_COMMITMENT]
#!
#! Where:
#! - STORAGE_COMMITMENT is the account storage commitment.
export.set_acct_storage_commitment
    exec.get_current_account_data_ptr push.ACCT_STORAGE_COMMITMENT_OFFSET add
    mem_storew
end

#! Returns the number of storage slots contained in the account storage.
#!
#! Inputs:  []
#! Outputs: [num_storage_slots]
#!
#! Where:
#! - num_storage_slots is the number of storage slots contained in the account storage.
export.get_num_storage_slots
    exec.get_current_account_data_ptr push.NUM_ACCT_STORAGE_SLOTS_OFFSET add
    mem_load
end

#! Sets the number of storage slots contained in the account storage.
#!
#! Inputs:  [num_storage_slots]
#! Outputs: []
#!
#! Where:
#! - num_storage_slots is the number of storage slots contained in the account storage.
export.set_num_storage_slots
    exec.get_current_account_data_ptr push.NUM_ACCT_STORAGE_SLOTS_OFFSET add
    mem_store
end

#! Returns the memory pointer to the account storage slots section.
#!
#! Inputs:  []
#! Outputs: [storage_slots_section_ptr]
#!
#! Where:
#! - storage_slots_section_ptr is the memory pointer to the account storage slots section.
export.get_acct_storage_slots_section_ptr
    exec.get_current_account_data_ptr push.ACCT_STORAGE_SLOTS_SECTION_OFFSET add
end

# INPUT NOTES
# -------------------------------------------------------------------------------------------------

#! Gets the total number of input notes in the transaction.
#!
#! Inputs:  []
#! Outputs: [num_input_notes]
#!
#! Where:
#! - num_input_notes is the total number of input notes in the transaction.
export.get_num_input_notes
    push.NUM_INPUT_NOTES_PTR mem_load
end

#! Sets the total number of input notes in the transaction.
#!
#! Inputs:  [num_input_notes]
#! Outputs: []
#!
#! Where:
#! - num_input_notes is the total number of input notes in the transaction.
export.set_num_input_notes
    push.NUM_INPUT_NOTES_PTR mem_store
end

#! Computes a pointer to the memory address at which the data associated with an input note with
#! index `idx` is stored.
#!
#! Inputs:  [idx]
#! Outputs: [note_ptr]
#!
#! Where:
#! - idx is the index of the input note.
#! - note_ptr is the memory address of the data segment for the input note with `idx`.
export.get_input_note_ptr
    exec.constants::get_note_mem_size mul push.INPUT_NOTE_DATA_SECTION_OFFSET add
end

#! Set the note id of the input note.
#!
#! Inputs:  [note_ptr, NOTE_ID]
#! Outputs: [NOTE_ID]
#!
#! Where:
#! - note_ptr is the input note's the memory address.
#! - NOTE_ID is the note's id.
export.set_input_note_id
    mem_storew
end

#! Computes a pointer to the memory address at which the nullifier associated a note with `idx` is
#! stored.
#!
#! Inputs:  [idx]
#! Outputs: [nullifier_ptr]
#!
#! Where:
#! - idx is the index of the input note.
#! - nullifier_ptr is the memory address of the nullifier for note idx.
export.get_input_note_nullifier_ptr
    mul.4 push.INPUT_NOTE_NULLIFIER_SECTION_PTR add
end

#! Returns the nullifier of an input note with `idx`.
#!
#! Inputs:  [idx]
#! Outputs: [nullifier]
#!
#! Where:
#! - idx is the index of the input note.
#! - nullifier is the nullifier of the input note.
export.get_input_note_nullifier
    mul.4 padw movup.4 push.INPUT_NOTE_NULLIFIER_SECTION_PTR add mem_loadw
end

#! Returns a pointer to the start of the input note core data segment for the note located at the
#! specified memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [note_data_ptr]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - note_data_ptr is the memory address at which the input note core data begins.
export.get_input_note_core_ptr
    push.INPUT_NOTE_CORE_DATA_OFFSET add
end

#! Returns the script root of an input note located at the specified memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [SCRIPT_ROOT]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - SCRIPT_ROOT is the script root of the input note.
export.get_input_note_script_root
    padw
    movup.4 push.INPUT_NOTE_SCRIPT_ROOT_OFFSET add
    mem_loadw
end

#! Returns the memory address of the script root of an input note.
#!
#! Inputs:  [note_ptr]
#! Outputs: [script_root_ptr]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - script_root_ptr is the memory address where script root of the input note is stored.
export.get_input_note_script_root_ptr
    push.INPUT_NOTE_SCRIPT_ROOT_OFFSET add
end

#! Returns the inputs commitment of an input note located at the specified memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [INPUTS_COMMITMENT]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - INPUTS_COMMITMENT is the inputs commitment of the input note.
export.get_input_note_inputs_commitment
    padw
    movup.4 push.INPUT_NOTE_INPUTS_COMMITMENT_OFFSET add
    mem_loadw
end

#! Returns the metadata of an input note located at the specified memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [METADATA]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - METADATA is the metadata of the input note.
export.get_input_note_metadata
    padw
    movup.4 push.INPUT_NOTE_METADATA_OFFSET add
    mem_loadw
end

#! Sets the metadata for an input note located at the specified memory address.
#!
#! Inputs:  [note_ptr, NOTE_METADATA]
#! Outputs: [NOTE_METADATA]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - NOTE_METADATA is the metadata of the input note.
export.set_input_note_metadata
    push.INPUT_NOTE_METADATA_OFFSET add
    mem_storew
end

#! Returns the note's args.
#!
#! Inputs:  [note_ptr]
#! Outputs: [NOTE_ARGS]
#!
#! Where:
#! - note_ptr is the start memory address of the note.
#! - NOTE_ARGS are the note's args.
export.get_input_note_args
    padw
    movup.4 push.INPUT_NOTE_ARGS_OFFSET add
    mem_loadw
end

#! Sets the note args for an input note located at the specified memory address.
#!
#! Inputs:  [note_ptr, NOTE_ARGS]
#! Outputs: [NOTE_ARGS]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - NOTE_ARGS are optional note args of the input note.
export.set_input_note_args
    push.INPUT_NOTE_ARGS_OFFSET add
    mem_storew
end

#! Returns the number of assets in the input note located at the specified memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [num_assets]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - num_assets is the number of assets in the input note.
export.get_input_note_num_assets
    push.INPUT_NOTE_NUM_ASSETS_OFFSET add
    mem_load
end

#! Sets the number of assets for an input note located at the specified memory address.
#!
#! Inputs:  [note_ptr, num_assets]
#! Outputs: []
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - num_assets is the number of assets in the input note.
export.set_input_note_num_assets
    push.INPUT_NOTE_NUM_ASSETS_OFFSET add
    mem_store
end

#! Returns a pointer to the start of the assets segment for the input note located at the specified
#! memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [assets_ptr]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - assets_ptr is the memory address at which the assets segment for the input note begins.
export.get_input_note_assets_ptr
    push.INPUT_NOTE_ASSETS_OFFSET add
end

#! Returns the assets commitment for the input note located at the specified memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [ASSET_COMMITMENT]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - ASSET_COMMITMENT is the sequential hash of the padded assets of an input note.
export.get_input_note_assets_hash
    padw
    movup.4 push.INPUT_NOTE_ASSETS_HASH_OFFSET add
    mem_loadw
end

#! Returns the serial number for the input note located at the specified memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [SERIAL_NUMBER]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - SERIAL_NUMBER is the input note's serial number.
export.get_input_note_serial_num
    padw
    movup.4 push.INPUT_NOTE_SERIAL_NUM_OFFSET add
    mem_loadw
end

#! Returns the sender for the input note located at the specified memory address.
#!
#! Inputs:  [note_ptr]
#! Outputs: [sender_id_prefix, sender_id_suffix]
#!
#! Where:
#! - note_ptr is the memory address at which the input note data begins.
#! - sender is the sender for the input note.
export.get_input_note_sender
    padw
    movup.4 push.INPUT_NOTE_METADATA_OFFSET add
    mem_loadw
    # => [aux, merged_tag_hint_payload, merged_sender_id_type_hint_tag, sender_id_prefix]

    drop drop
    # => [merged_sender_id_type_hint_tag, sender_id_prefix]

    # extract suffix of sender from merged layout, which means clearing the least significant byte
    u32split swap
    # => [merged_lo, merged_hi, sender_id_prefix]

    # clear least significant byte
    u32and.0xffffff00 swap
    # => [sender_id_suffix_hi, sender_id_suffix_lo, sender_id_prefix]

    # reassemble the suffix by multiplying the high part with 2^32 and adding the lo part
    mul.0x0100000000 add swap
    # => [sender_id_prefix, sender_id_suffix]

end

# OUTPUT NOTES
# -------------------------------------------------------------------------------------------------

#! Returns the offset of the output note data segment.
#!
#! Inputs:  []
#! Outputs: [offset]
#!
#! Where:
#! - offset is the offset of the output note data segment.
export.get_output_note_data_offset
    push.OUTPUT_NOTE_SECTION_OFFSET
end

#! Computes a pointer to the memory address at which the data associated with an output note with
#! index `i` is stored.
#!
#! Inputs:  [i]
#! Outputs: [ptr]
#!
#! Where:
#! - i is the index of the output note.
#! - ptr is the memory address of the data segment for output note i.
export.get_output_note_ptr
    exec.constants::get_note_mem_size mul push.OUTPUT_NOTE_SECTION_OFFSET add
end

#! Returns the output note recipient.
#!
#! Inputs:  [output_note_data_ptr]
#! Outputs: [RECIPIENT]
#!
#! Where:
#! - output_note_data_ptr is the memory address at which the output note data begins.
#! - RECIPIENT is the recipient of the output note.
export.get_output_note_recipient
    padw
    movup.4 push.OUTPUT_NOTE_RECIPIENT_OFFSET add
    mem_loadw
end

#! Sets the output note's recipient.
#!
#! Inputs:  [note_ptr, RECIPIENT]
#! Outputs: [RECIPIENT]
#!
#! Where:
#! - RECIPIENT is the recipient of the note.
#! - note_ptr is the memory address at which the output note data begins.
export.set_output_note_recipient
    push.OUTPUT_NOTE_RECIPIENT_OFFSET add
    mem_storew
end

#! Sets the output note's metadata.
#!
#! Inputs:  [note_ptr, METADATA]
#! Outputs: [METADATA]
#!
#! Where:
#! - METADATA is the note metadata.
#! - note_ptr is the memory address at which the output note data begins.
export.set_output_note_metadata
    push.OUTPUT_NOTE_METADATA_OFFSET add
    mem_storew
end

#! Returns the number of assets in the output note.
#!
#! Inputs:  [note_ptr]
#! Outputs: [num_assets]
#!
#! Where:
#! - note_ptr is a pointer to the memory address at which the output note is stored.
#! - num_assets is the number of assets in the output note.
export.get_output_note_num_assets
    push.OUTPUT_NOTE_NUM_ASSETS_OFFSET add mem_load
end

#! Sets the number of assets in the output note.
#!
#! Inputs:  [note_ptr, num_assets]
#! Outputs: []
#!
#! Where:
#! - note_ptr is the memory address at which the output note data begins.
#! - num_assets is the number of assets in the output note.
#!
#! Panics if:
#! - the number of assets exceeds the maximum allowed number of assets per note.
export.set_output_note_num_assets
    push.OUTPUT_NOTE_NUM_ASSETS_OFFSET add
    # => [note_ptr + offset, num_assets]

    # check note number of assets limit
    dup.1 exec.constants::get_max_assets_per_note lt assert.err=ERR_NOTE_NUM_OF_ASSETS_EXCEED_LIMIT

    mem_store
end

#! Returns a pointer to the output note asset data.
#!
#! Inputs:  [output_note_data_ptr]
#! Outputs: [asset_data_ptr]
#!
#! Where:
#! - output_note_data_ptr is the memory address at which the output note data begins.
#! - asset_data_ptr is the memory address at which the output note asset data begins.
export.get_output_note_asset_data_ptr
    push.OUTPUT_NOTE_ASSETS_OFFSET add
end

#! Sets the output note assets commitment.
#!
#! Inputs:  [output_note_data_ptr, ASSET_COMMITMENT]
#! Outputs: [ASSET_COMMITMENT]
#!
#! Where:
#! - output_note_data_ptr is the memory address at which the output note data begins.
#! - ASSET_COMMITMENT is the sequential hash of the padded assets of an output note.
export.set_output_note_assets_hash
    push.OUTPUT_NOTE_ASSETS_HASH_OFFSET add
    mem_storew
end

#! Computes and sets the asset id seed.
#!
#! Inputs:  []
#! Outputs: []
export.init_asset_id_seed
  exec.get_block_commitment
  # => [BLOCK_COMMITMENT]

  exec.get_account_id
  # => [curr_acct_id_prefix, curr_acct_id_suffix, BLOCK_COMMITMENT]

  push.0 exec.get_acct_nonce
  # => [nonce, 0, curr_acct_id_prefix, curr_acct_id_suffix, BLOCK_COMMITMENT]

  # TODO: Not sure if this is correct
  hmerge
  # => [ASSET_ID_SEED]

  push.ASSET_ID_SEED_PTR mem_storew dropw
end

#! Computes a new Asset ID and increments the number of created assets by one.
#!
#! Inputs:  []
#! Outputs: []
export.generate_asset_id
  padw push.ASSET_ID_SEED_PTR mem_loadw
  # => [ASSET_ID_SEED]

  push.ASSET_NUM_CREATED mem_load
  # => [num_created, ASSET_ID_SEED]

  dup add.1
  # => [num_created+1, num_created, ASSET_ID_SEED]

  push.ASSET_NUM_CREATED mem_store
  # => [num_created, ASSET_ID_SEED]

  push.0.0.0
  # => [0, 0, 0, num_created, ASSET_ID_SEED]

  hmerge
  # => [ASSET_ID]
end

export.init_next_asset_ptr
  push.ASSET_MIN_PTR
  push.ASSET_PTR_MAP_MIN
  mem_store
end


#! Computes the next free asset pointer for an asset with the given number of felts.
#!
#! Inputs:  [num_fields]
#! Outputs: [asset_ptr]
export.get_next_asset_ptr
    # Assert num_fields % 8 == 0 (we can actually allow arbitrary field nums and compute the next multiple,
    # this is just for asset hash padding reasons)
    dup push.8 u32mod assertz.err=163
    # => [num_fields]

    push.ASSET_NEXT_OFFSET_PTR mem_load
    # => [map_offset, num_fields]

    dup add.ASSET_PTR_MAP_MIN swap
    # => [map_offset, asset_ptr, num_fields]

    # TODO: Assert offset is in valid range.
  
    # update offset so it points to the next map entry on the next call
    add.1 dup push.ASSET_NEXT_OFFSET_PTR mem_store
    # => [next_map_offset, asset_ptr, num_fields]
    movdn.2
    # => [asset_ptr, num_fields, next_map_offset]
    dup mem_load swap
    # => [asset_ptr, asset_mem_ptr, num_fields, next_map_offset]

    swap.2
    # => [num_fields, asset_mem_ptr, asset_ptr, next_map_offset]

    push.ASSET_BOOKKEEPING_SIZE
    # => [ASSET_BOOKKEEPING_SIZE, num_fields, asset_mem_ptr, asset_ptr, next_map_offset]

    add add
    # => [next_asset_mem_ptr, asset_ptr, next_map_offset]

    # store the next asset mem ptr in the _next_ asset ptr map entry
    movup.2 add.ASSET_PTR_MAP_MIN
    # => [next_map_entry_ptr, next_asset_mem_ptr, asset_ptr]
    mem_store
    # => [asset_ptr]
end

#! Invalidates an asset ptr by making it point to zero.
#!
#! Inputs:  [asset_ptr]
#! Outputs: []
export.invalidate_asset_ptr
  push.0 swap mem_store
  # => []
end

#! Computes the one time witness pointer for the given otw ID which is assumed to be within the valid range.
#!
#! Inputs:  [one_time_witness_id]
#! Outputs: [one_time_witness_ptr]
export.compute_otw_ptr
  push.ASSET_OTW add
end

#! Computes the pointer to an asset's field.
#!
#! Inputs:  [asset_mem_ptr, field_idx]
#! Outputs: [asset_field_ptr]
export.compute_asset_field_ptr
  push.ASSET_BOOKKEEPING_SIZE add add
  # => [asset_field_ptr]
end

#! Computes the asset hash.
#!
#! Inputs:  [asset_mem_ptr]
#! Outputs: [ASSET_HASH]
export.compute_asset_hash
  dup dup
  # => [asset_mem_ptr, asset_mem_ptr, asset_hash_start_ptr]

  exec.asset_get_num_fields push.ASSET_BOOKKEEPING_SIZE add add
  # => [asset_hash_end_ptr, asset_hash_start_ptr]
  swap dup movdn.2
  # => [asset_hash_start_ptr, asset_hash_end_ptr, asset_hash_start_ptr]

  # initialize hasher state
  padw padw padw
  # => [pad(12), asset_hash_start_ptr, asset_hash_end_ptr, asset_hash_start_ptr]

  exec.rpo::absorb_double_words_from_memory
  exec.rpo::squeeze_digest
  # => [ASSET_HASH, asset_hash_end_ptr, asset_hash_end_ptr, asset_hash_start_ptr]

  movup.4 drop
  # => [ASSET_HASH, asset_hash_end_ptr, asset_hash_start_ptr]
  movup.5 movdn.4
  # => [ASSET_HASH, asset_hash_start_ptr, asset_hash_end_ptr]

  # insert the object into the advice provider for demo purposes,
  # so we can load it from there
  adv.insert_mem

  movup.4 drop movup.4 drop
  # => [ASSET_HASH]
end

#! Sets the asset ID of an asset.
#!
#! Inputs:  [asset_mem_ptr, ASSET_ID]
#! Outputs: []
export.set_asset_id
  mem_storew dropw
end

#! Gets the asset ID of an asset.
#!
#! Inputs:  [asset_mem_ptr]
#! Outputs: [ASSET_ID]
export.get_asset_id
  padw movup.4 mem_loadw
end

#! Sets the issuer of an asset.
#!
#! Inputs:  [asset_mem_ptr, account_id_prefix, account_id_suffix]
#! Outputs: []
export.set_asset_issuer
  dup movdn.2
  # => [asset_mem_ptr, account_id_prefix, asset_mem_ptr, account_id_suffix]

  push.ASSET_ISSUER_PREFIX_OFFSET add mem_store
  # => [asset_mem_ptr, account_id_suffix]

  push.ASSET_ISSUER_SUFFIX_OFFSET add mem_store
  # => []
end

#! Gets the issuer of an asset.
#!
#! Inputs:  [asset_mem_ptr]
#! Outputs: [account_id_prefix, account_id_suffix]
export.asset_get_issuer
  push.ASSET_ISSUER_SUFFIX_OFFSET dup.1 add mem_load
  # => [account_id_suffix, asset_mem_ptr]

  swap push.ASSET_ISSUER_PREFIX_OFFSET add mem_load
  # => [account_id_prefix, account_id_suffix]
end

#! Sets the type of an asset.
#!
#! Inputs:  [asset_mem_ptr, type_id]
#! Outputs: []
export.set_asset_type
  push.ASSET_TYPE_ID_OFFSET add mem_store
  # => []
end

#! Gets the type of an asset.
#!
#! Inputs:  [asset_mem_ptr]
#! Outputs: [type_id]
export.asset_get_type
  push.ASSET_TYPE_ID_OFFSET add mem_load
  # => []
end

#! Sets the number of fields of an asset.
#!
#! Inputs:  [asset_mem_ptr, num_fields]
#! Outputs: []
export.set_asset_num_fields
  push.ASSET_NUM_FIELDS_OFFSET add mem_store
  # => []
end

#! Gets the number of fields of an asset.
#!
#! Inputs:  [asset_mem_ptr]
#! Outputs: [num_fields]
export.asset_get_num_fields
  push.ASSET_NUM_FIELDS_OFFSET add mem_load
  # => [num_fields]
end

#! Asserts the validity of an asset ptr by checking that it is within the range of loaded asset pointers.
#! If it is valid, returns the dereferenced pointer to the actual memory of the asset.
#!
#! Inputs:  [asset_ptr]
#! Outputs: [asset_mem_ptr]
export.assert_valid_asset_ptr
  # check asset_ptr >= ptr_map_min
  dup gte.ASSET_PTR_MAP_MIN assert.err=9421
  # => [asset_ptr]

  # check asset_ptr < next_asset_ptr
  dup push.ASSET_PTR_MAP_MIN push.ASSET_NEXT_OFFSET_PTR mem_load add
  # => [next_asset_ptr, asset_ptr, asset_ptr]
  lt assert.err=34817
  # => [asset_ptr]

  # dereference the asset ptr to the actual memory location of the asset
  mem_load
  # => [asset_mem_ptr]

  # if it is a null pointer, it means we have invalidated the ptr and we abort
  dup eq.0 assertz.err=491472
  # => [asset_mem_ptr]
end

# KERNEL DATA
# -------------------------------------------------------------------------------------------------

#! Sets the number of the procedures of the selected kernel.
#!
#! Inputs:  [num_kernel_procedures]
#! Outputs: []
#!
#! Where:
#! - num_kernel_procedures is the number of the procedures of the selected kernel.
export.set_num_kernel_procedures
    push.NUM_KERNEL_PROCEDURES_PTR mem_store
end

#! Returns the number of the procedures of the selected kernel.
#!
#! Inputs:  []
#! Outputs: [num_kernel_procedures]
#!
#! Where:
#! - num_kernel_procedures is the number of the procedures of the selected kernel.
export.get_num_kernel_procedures
    push.NUM_KERNEL_PROCEDURES_PTR mem_load
end

#! Returns a pointer to the memory where hashes of the kernel procedures are stored.
#!
#! Inputs:  []
#! Outputs: [kernel_procedures_ptr]
#!
#! Where:
#! - kernel_procedures_ptr is the memory address where the hashes of the kernel procedures are
#!   stored.
export.get_kernel_procedures_ptr
    push.KERNEL_PROCEDURES_PTR
end
