use.miden::kernel_proc_offsets

# NATIVE ACCOUNT PROCEDURES
# =================================================================================================

#! Returns the account ID.
#!
#! Inputs:  []
#! Outputs: [acct_id_prefix, acct_id_suffix]
#!
#! Where:
#! - acct_id_{prefix,suffix} are the prefix and suffix felts of the account ID.
#!
#! Invocation: exec
export.get_id
    # start padding the stack
    push.0.0.0

    exec.kernel_proc_offsets::account_get_id_offset
    # => [offset, 0, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [acct_id_prefix, acct_id_suffix, pad(14)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 movdn.3 drop drop
    # => [acct_id_prefix, acct_id_suffix]
end

#! Returns the ID of the native account.
#!
#! Inputs:  []
#! Outputs: [acct_id_prefix, acct_id_suffix]
#!
#! Where:
#! - acct_id_{prefix,suffix} are the prefix and suffix felts of the account ID.
#!
#! Invocation: exec
export.get_native_id
    # start padding the stack
    push.0.0.0

    exec.kernel_proc_offsets::get_native_account_id_offset
    # => [offset, 0, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [acct_id_prefix, acct_id_suffix, pad(14)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 movdn.3 drop drop
    # => [acct_id_prefix, acct_id_suffix]
end

#! Returns the account nonce.
#!
#! Inputs:  []
#! Outputs: [nonce]
#!
#! Where:
#! - nonce is the account nonce.
#!
#! Invocation: exec
export.get_nonce
    # start padding the stack
    push.0.0.0

    exec.kernel_proc_offsets::account_get_nonce_offset
    # => [offset, 0, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [nonce, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [nonce]
end

#! Returns the initial account commitment.
#!
#! Inputs:  []
#! Outputs: [INIT_COMMITMENT]
#!
#! Where:
#! - INIT_COMMITMENT is the initial account commitment.
#!
#! Invocation: exec
export.get_initial_commitment
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_get_initial_commitment_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [INIT_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [INIT_COMMITMENT]
end

#! Computes and returns the account commitment from account data stored in memory.
#!
#! Inputs:  []
#! Outputs: [ACCOUNT_COMMITMENT]
#!
#! Where:
#! - ACCOUNT_COMMITMENT is the commitment of the account data.
#!
#! Invocation: exec
export.get_current_commitment
    # pad the stack
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_get_current_commitment_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [ACCOUNT_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [ACCOUNT_COMMITMENT]
end

#! Increments the account nonce by the provided value.
#!
#! Inputs:  [value]
#! Outputs: []
#!
#! Where:
#! - value is the value to increment the nonce by. value can be at most 2^32 - 1 otherwise this
#!   procedure panics.
#!
#! Invocation: exec
export.incr_nonce
    # start padding the stack
    push.0.0 movup.2
    # => [value, 0, 0]

    exec.kernel_proc_offsets::account_incr_nonce_offset
    # => [offset, value, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, value, pad(14)]

    syscall.exec_kernel_proc
    # => [pad(16)]

    dropw dropw dropw dropw
end

#! Gets an item from the account storage. Panics if the index is out of bounds.
#!
#! Inputs:  [index]
#! Outputs: [VALUE]
#!
#! Where:
#! - index is the index of the item to get.
#! - VALUE is the value of the item.
#!
#! Panics if:
#! - the index of the requested item is out of bounds.
#!
#! Invocation: exec
export.get_item
    push.0.0 movup.2
    # => [index, 0, 0]

    exec.kernel_proc_offsets::account_get_item_offset
    # => [offset, index, 0, 0]

    # pad the stack
    padw swapw padw padw swapdw
    # => [offset, index, pad(14)]

    syscall.exec_kernel_proc
    # => [VALUE, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [VALUE]
end

#! Sets an item in the account storage. Panics if the index is out of bounds.
#!
#! Inputs:  [index, V']
#! Outputs: [R', V]
#!
#! Where:
#! - index is the index of the item to set.
#! - V' is the value to set.
#! - V is the previous value of the item.
#! - R' is the new storage commitment.
#!
#! Panics if:
#! - the index of the item is out of bounds.
#!
#! Invocation: exec
export.set_item
    exec.kernel_proc_offsets::account_set_item_offset
    # => [offset, index, V']

    # pad the stack
    push.0.0 movdn.7 movdn.7 padw padw swapdw
    # => [offset, index, V', pad(10)]

    syscall.exec_kernel_proc
    # => [R', V, pad(8)]

    # clean the stack
    swapdw dropw dropw
    # => [R', V]
end

#! Gets a map item from the account storage.
#!
#! Inputs:  [index, KEY]
#! Outputs: [VALUE]
#!
#! Where:
#! - index is the index of the map where the KEY VALUE should be read.
#! - KEY is the key of the item to get.
#! - VALUE is the value of the item.
#!
#! Panics if:
#! - the index for the map is out of bounds, meaning > 255.
#! - the slot item at index is not a map.
#!
#! Invocation: exec
export.get_map_item
    exec.kernel_proc_offsets::account_get_map_item_offset
    # => [offset, index, KEY]

    # pad the stack
    push.0.0 movdn.7 movdn.7 padw padw swapdw
    # => [offset, index, KEY, pad(10)]

    syscall.exec_kernel_proc
    # => [VALUE, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [VALUE]
end

#! Sets a map item in the account storage.
#!
#! Inputs:  [index, KEY, VALUE]
#! Outputs: [OLD_MAP_ROOT, OLD_MAP_VALUE]
#!
#! Where:
#! - index is the index of the map where the KEY VALUE should be set.
#! - KEY is the key to set at VALUE.
#! - VALUE is the value to set at KEY.
#! - OLD_MAP_ROOT is the old map root.
#! - OLD_MAP_VALUE is the old value at KEY.
#!
#! Panics if:
#! - the index for the map is out of bounds, meaning > 255.
#! - the slot item at index is not a map.
#!
#! Invocation: exec
export.set_map_item
    exec.kernel_proc_offsets::account_set_map_item_offset
    # => [offset, index, KEY, VALUE]

    # pad the stack
    push.0.0 movdn.11 movdn.11 padw movdnw.3
    # => [offset, index, KEY, VALUE, pad(6)]

    syscall.exec_kernel_proc
    # => [OLD_MAP_ROOT, OLD_MAP_VALUE, pad(8)]

    # clean the stack
    swapdw dropw dropw
    # => [OLD_MAP_ROOT, OLD_MAP_VALUE]
end

#! Gets the code commitment of the account the transaction is being executed against.
#!
#! Inputs:  []
#! Outputs: [CODE_COMMITMENT]
#!
#! Where:
#! - CODE_COMMITMENT is the commitment of the account code.
#!
#! Invocation: exec
export.get_code_commitment
    exec.kernel_proc_offsets::account_get_code_commitment_offset
    # => [offset]

    # pad the stack
    push.0.0.0 movup.3 padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [CODE_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [CODE_COMMITMENT]
end

#! Gets the storage commitment of the account the transaction is being executed against.
#!
#! Inputs:  []
#! Outputs: [STORAGE_COMMITMENT]
#!
#! Where:
#! - STORAGE_COMMITMENT is the commitment of the account storage.
#!
#! Invocation: exec
export.get_storage_commitment
    exec.kernel_proc_offsets::account_get_storage_commitment_offset
    # => [offset]

    # pad the stack
    push.0.0.0 movup.3 padw swapw padw padw swapdw
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [STORAGE_COMMITMENT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [STORAGE_COMMITMENT]
end

#! Returns the balance of a fungible asset associated with a faucet_id.
#!
#! Inputs:  [faucet_id_prefix, faucet_id_suffix]
#! Outputs: [balance]
#!
#! Where:
#! - faucet_id_{prefix,suffix} are the prefix and suffix felts of the faucet id of the fungible
#!   asset of interest.
#! - balance is the vault balance of the fungible asset.
#!
#! Panics if:
#! - the asset is not a fungible asset.
#!
#! Invocation: exec
export.get_balance
    exec.kernel_proc_offsets::account_get_balance_offset
    # => [offset, faucet_id_prefix, faucet_id_suffix]

    # pad the stack
    push.0 movdn.3 padw swapw padw padw swapdw
    # => [offset, faucet_id_prefix, faucet_id_suffix, pad(13)]

    syscall.exec_kernel_proc
    # => [balance, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [balance]
end

#! Returns a boolean indicating whether the non-fungible asset is present in the vault.
#!
#! Inputs:  [ASSET]
#! Outputs: [has_asset]
#!
#! Where:
#! - ASSET is the non-fungible asset of interest
#! - has_asset is a boolean indicating whether the account vault has the asset of interest
#!
#! Panics if:
#! - the ASSET is a fungible asset.
#!
#! Invocation: exec
export.has_non_fungible_asset
    exec.kernel_proc_offsets::account_has_non_fungible_asset_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [has_asset, pad(15)]

    # clean the stack
    swapdw dropw dropw swapw dropw movdn.3 drop drop drop
    # => [has_asset]
end

#! Add the specified asset to the vault.
#!
#! Inputs:  [ASSET]
#! Outputs: [ASSET']
#!
#! Where:
#! - ASSET' is a final asset in the account vault defined as follows:
#!   - If ASSET is a non-fungible asset, then ASSET' is the same as ASSET.
#!   - If ASSET is a fungible asset, then ASSET' is the total fungible asset in the account vault
#!     after ASSET was added to it.
#!
#! Panics if:
#! - the asset is not valid.
#! - the total value of two fungible assets is greater than or equal to 2^63.
#! - the vault already contains the same non-fungible asset.
#!
#! Invocation: exec
export.add_asset
    exec.kernel_proc_offsets::account_add_asset_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [ASSET', pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [ASSET']
end

#! Remove the specified asset from the vault.
#!
#! Inputs:  [ASSET]
#! Outputs: [ASSET]
#!
#! Where:
#! - ASSET is the asset to remove from the vault.
#!
#! Panics if:
#! - the fungible asset is not found in the vault.
#! - the amount of the fungible asset in the vault is less than the amount to be removed.
#! - the non-fungible asset is not found in the vault.
#!
#! Invocation: exec
export.remove_asset
    exec.kernel_proc_offsets::account_remove_asset_offset
    # => [offset, ASSET]

    # pad the stack
    push.0.0.0 movdn.7 movdn.7 movdn.7 padw padw swapdw
    # => [offset, ASSET, pad(11)]

    syscall.exec_kernel_proc
    # => [ASSET, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [ASSET]
end

#! Returns a commitment to the account vault.
#!
#! Inputs:  []
#! Outputs: [VAULT_ROOT]
#!
#! Where:
#! - VAULT_ROOT is a commitment to the account vault.
#!
#! Invocation: exec
export.get_vault_root
    # pad the stack for syscall invocation
    padw padw padw push.0.0.0
    # => [pad(15)]

    exec.kernel_proc_offsets::account_get_vault_root_offset
    # => [offset, pad(15)]

    syscall.exec_kernel_proc
    # => [VAULT_ROOT, pad(12)]

    # clean the stack
    swapdw dropw dropw swapw dropw
    # => [VAULT_ROOT]
end

#! Returns a boolean indicating whether the account is a fungible faucet.
#!
#! Stack: [acct_id]
#! Output: [is_fungible_faucet]
#!
#! - acct_id is the account ID.
#! - is_fungible_faucet is a boolean indicating whether the account is a fungible faucet.
export.::miden::util::account_id::is_fungible_faucet

#! Returns a boolean indicating whether the account is a non-fungible faucet.
#!
#! Stack: [acct_id]
#! Output: [is_non_fungible_faucet]
#!
#! - acct_id is the account ID.
#! - is_non_fungible_faucet is a boolean indicating whether the account is a non-fungible faucet.
export.::miden::util::account_id::is_non_fungible_faucet

#! Returns a boolean indicating whether the given account_ids are equal.
#!
#! Inputs:  [acct_id_prefix, acct_id_suffix, other_acct_id_prefix, other_acct_id_suffix]
#! Outputs: [is_id_equal]
#!
#! Where:
#! - acct_id_{prefix,suffix} are the prefix and suffix felts of an account ID.
#! - other_acct_id_{prefix,suffix} are the prefix and suffix felts of the other account ID to
#!   compare against.
#! - is_id_equal is a boolean indicating whether the account IDs are equal.
export.::miden::util::account_id::is_equal->is_id_equal
